{
    "ModBase.ClassAndMethodExist": {
        "body": [
            "ModBase.ClassAndMethodExist(",
            "\t${1:ClassName},  --string",
            "\t${2:MethodName}, --string",
            ")${0}"
        ],
        "description": [
            "See if a mod method exists.\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  ClassName  - string",
            "  MethodName - string\n",
            "Returns",
            "  Boolean - true if class and method exist\n",
            "Example",
            "  ModBase.ClassAndMethodExist('ModBuilding','SomeBuildingFunct\n    ion')\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.ClassAndMethodExist"
    },
    "ModBase.DisableSafety": {
        "body": [
            "ModBase.DisableSafety(",
            "\t${1:*Disable}, --bool",
            ")${0}"
        ],
        "description": [
            "Disable the safety functionality - Stops flowers, birds,\n  trees etc. from always spawning to a safe amount\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  Disable - Boolean - True to disable safety, false to keep it\n              enabled - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.DisableSafety(true)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModBase.DisableSafety"
    },
    "ModBase.ExposeKeybinding": {
        "body": [
            "ModBase.ExposeKeybinding(",
            "\t${1:*UniqueName}, --string",
            "\t${2:*Key},        --int",
            "\t${3:*Callback},   --DynValue",
            ")${0}"
        ],
        "description": [
            "Expose a defined keybinding - Allowing a user to define a\n  key to your expressed function callback\n",
            "Version",
            "  134.31\n",
            "Parameters",
            "  UniqueName - String - The unique and corresponding name of\n                 the Exposed variable - Required",
            "  Key        - Number (integer) - The unique key to choose\n                 (from 1-10 inc.) that will be found to the\n                 function callback provided - Required",
            "  Callback   - Function - The function to callback when the\n                 keypress is made - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.ExposeKeybinding(\"Explosion\", 4, ExposedKeyCallback)\n",
            "Note",
            "  Can be used in functions: Expose()\n"
        ],
        "prefix": "ModBase.ExposeKeybinding"
    },
    "ModBase.ExposeVariable": {
        "body": [
            "ModBase.ExposeVariable(",
            "\t${1:*UniqueName},   --string",
            "\t${2:*DefaultValue}, --DynValue",
            "\t${3:*Callback},     --DynValue",
            "\t${4:*Min},          --DynValue",
            "\t${5:*Max},          --DynValue",
            ")${0}"
        ],
        "description": [
            "Expose a variable - Allowing a user to define the exact\n  'amount' of the 'item' and calls back to the expressed\n  function.\n",
            "Version",
            "  134.31\n",
            "Parameters",
            "  UniqueName   - String - The unique and corresponding name of\n                   the Exposed variable - Required",
            "  DefaultValue - String/Number/Boolean - The starting\n                   (default) value of your Exposed variable\n                   - Required",
            "  Callback     - Function - The function to callback when the\n                   value is changed - Required",
            "  Min          - Number - The minimum allowed value of your\n                   Exposed variable - Required for Numbers",
            "  Max          - Number - The maximum allowed value of your\n                   Exposed variable - Required for Numbers\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.ExposeVariable(\"Speed\", Speed, ExposedCallback)\n",
            "Note",
            "  Can be used in functions: Expose()\n"
        ],
        "prefix": "ModBase.ExposeVariable"
    },
    "ModBase.ExposeVariableList": {
        "body": [
            "ModBase.ExposeVariableList(",
            "\t${1:*UniqueName},            --string",
            "\t${2:*DefaultOptions},        --DynValue[]",
            "\t${3:*DefaultSelectedOption}, --int",
            "\t${4:*Callback},              --DynValue",
            ")${0}"
        ],
        "description": [
            "Expose a variable list - Allowing a user to define an option\n  from dropdown and calls back to the expressed function.\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  UniqueName            - String - The unique and\n                            corresponding name of the\n                            Exposed variable - Required",
            "  DefaultOptions        - String Array - The starting\n                            (default) value of your Exposed\n                            variable - Required",
            "  DefaultSelectedOption - Number (int) - The starting\n                            (default) option of your Exposed\n                            variable - Required",
            "  Callback              - Function - The function to callback\n                            when the value is changed -\n                            Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.ExposeVariableList(\"Colours\",\n    {\"Red\",\"Blue\",\"Yellow\"}, 0, ExposedCallback)\n",
            "Note",
            "  Can be used in functions: Expose()\n"
        ],
        "prefix": "ModBase.ExposeVariableList"
    },
    "ModBase.GetExposedVariable": {
        "body": [
            "ModBase.GetExposedVariable(",
            "\t${1:*UniqueName}, --string",
            ")${0}"
        ],
        "description": [
            "Get an Exposed variable value\n",
            "Version",
            "  134.26\n",
            "Parameters",
            "  UniqueName - String - The unique and corresponding name of\n                 the Exposed variable - Required\n",
            "Returns",
            "  Dynamic - returns variable contents (of what was asked for)\n",
            "Example",
            "  ModBase.GetExposedVariable(\"Speed\")\n",
            "Note",
            "  Can be used in functions: Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetExposedVariable"
    },
    "ModBase.GetGameState": {
        "body": [
            "ModBase.GetGameState()"
        ],
        "description": [
            "Get the current state of the game\n",
            "Version",
            "  134.31\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  String - State as a string (e.g. \"Normal\" or \"Edit\" or \"MainMenu\")\n",
            "Example",
            "  ModBase.GetGameState()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetGameState"
    },
    "ModBase.GetGameVersion": {
        "body": [
            "ModBase.GetGameVersion()"
        ],
        "description": [
            "Get the version of the game\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  String - Version as a string (e.g. \"134.31\")\n",
            "Example",
            "  ModBase.GetGameVersion()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetGameVersion"
    },
    "ModBase.GetGameVersionMajor": {
        "body": [
            "ModBase.GetGameVersionMajor()"
        ],
        "description": [
            "Get the MAJOR version of the game\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number - Major part of Version as a number (e.g. returns '136' if version is \"136.22\")\n",
            "Example",
            "  ModBase.GetGameVersionMajor()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetGameVersionMajor"
    },
    "ModBase.GetGameVersionMinor": {
        "body": [
            "ModBase.GetGameVersionMinor()"
        ],
        "description": [
            "Get the MINOR version of the game\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number - Minor part of Version as a number (e.g. returns '22' if version is \"136.22\")\n",
            "Example",
            "  ModBase.GetGameVersionMinor()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetGameVersionMinor"
    },
    "ModBase.GetGameVersionPatch": {
        "body": [
            "ModBase.GetGameVersionPatch()"
        ],
        "description": [
            "Get the PATCH version of the game\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number - Patch part of Version as a number (e.g. returns '3' if version is \"136.22.3\")(Returns 0 if no patch number)\n",
            "Example",
            "  ModBase.GetGameVersionPatch()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.GetGameVersionPatch"
    },
    "ModBase.IsGameVersionGreaterThanEqualTo": {
        "body": [
            "ModBase.IsGameVersionGreaterThanEqualTo(",
            "\t${1:DesiredVersion}, --string",
            ")${0}"
        ],
        "description": [
            "GIs the current version above the specified version of the\n  game\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  DesiredVersion - String - The Version number e.g. \"136.22.4\"\n",
            "Returns",
            "  Boolean - True if version of game is above or equal to passed in version\n",
            "Example",
            "  ModBase.IsGameVersionGreaterThanEqualTo(\"136.22.4\")\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.IsGameVersionGreaterThanEqualTo"
    },
    "ModBase.IsNightTime": {
        "body": [
            "ModBase.IsNightTime()"
        ],
        "description": [
            "Get if the game is currently at night\n",
            "Version",
            "  134.31\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Boolean - true for night time, false for day time\n",
            "Example",
            "  ModBase.GetGameState()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.IsNightTime"
    },
    "ModBase.IsRaining": {
        "body": [
            "ModBase.IsRaining()"
        ],
        "description": [
            "Get if it's currently raining in game\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Boolean - true for raining\n",
            "Example",
            "  ModBase.IsRaining()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.IsRaining"
    },
    "ModBase.RegisterForInputMouseButtonDown": {
        "body": [
            "ModBase.RegisterForInputMouseButtonDown(",
            "\t${1:*Callback}, --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for input callbacks (for On Mouse Button Down)\n",
            "Version",
            "  135.17\n",
            "Parameters",
            "  Callback - Function - The function to callback when any\n               mouse button down event occurs - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.RegisterForInputMouseButtonDown(InputCallback)\n",
            "Note",
            "  Can be used in functions: Expose()\n"
        ],
        "prefix": "ModBase.RegisterForInputMouseButtonDown"
    },
    "ModBase.RegisterForInputPress": {
        "body": [
            "ModBase.RegisterForInputPress(",
            "\t${1:*Callback}, --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for input callbacks (for On KeyPress)\n",
            "Version",
            "  134.31\n",
            "Parameters",
            "  Callback - Function - The function to callback when any\n               keypress is made - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.RegisterForInputPress(InputCallback)\n",
            "Note",
            "  Can be used in functions: Expose()\n"
        ],
        "prefix": "ModBase.RegisterForInputPress"
    },
    "ModBase.RegisterForItemTypeSpawnedCallback": {
        "body": [
            "ModBase.RegisterForItemTypeSpawnedCallback(",
            "\t${1:NewTypeString}, --string",
            "\t${2:Callback},      --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for a callback when item of type spawned\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  ObjectType - String - The 'Type' of object",
            "  Callback   - Function to be called when building is\n                 destroyed\n",
            "Returns",
            "  none\n",
            "Example",
            "  ModBase.RegisterForItemTypeSpawnedCallback(ObjectType,\n    CallbackFunction)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.RegisterForItemTypeSpawnedCallback"
    },
    "ModBase.SetSteamWorkshopDetails": {
        "body": [
            "ModBase.SetSteamWorkshopDetails(",
            "\t${1:*Title},        --string = \"\"",
            "\t${2:*Description},  --string = \"\"",
            "\t${3:*Tags},         --string[] = null",
            "\t${4:*ContentImage}, --string = \"\"",
            ")${0}"
        ],
        "description": [
            "Setup information for Mod and Steam workshop\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Title        - String - Title of the Mod - Required",
            "  Description  - String - Description about the Mod - Required",
            "  Tags         - String Array - Each of the tags used in Steam\n                   Workshop - Required",
            "  ContentImage - String - Image used to show the Mod (in game\n                   and in Steam) - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBase.SetSteamWorkshopDetails(\"MyFirstMod\", \"Description\",\n    {\"tag1\", \"tag2\"}, \"ThisIsTheLogo.png\")\n",
            "Note",
            "  Can be used in functions: SteamDetails()\n"
        ],
        "prefix": "ModBase.SetSteamWorkshopDetails"
    },
    "ModBase.SpawnItem": {
        "body": [
            "ModBase.SpawnItem(",
            "\t${1:*Item},   --string = \"Nothing\"",
            "\t${2:*NewX},   --int = 0",
            "\t${3:*NewY},   --int = 0",
            "\t${4:DoOnce},  --bool = false",
            "\t${5:Instant}, --bool = false",
            "\t${6:ForceBP}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Spawn an item in game\n",
            "Version",
            "  134.24\n",
            "Parameters",
            "  Item    - String - The item to spawn - Required",
            "  NewX    - Number (integer) - X Position in tile coordinates\n              - Required",
            "  NewY    - Number (integer) - Y Position in tile coordinates\n              - Required",
            "  DoOnce  - Boolean - If this should only spawn once, or every\n              load (do not use in a large loop) - Defaults\n              to false",
            "  Instant - Boolean - If the building should be forced\n              instantly built - Defaults to false",
            "  ForceBP - Boolean - If the building should be forced to\n              blueprint stage - Defaults to false\n",
            "Returns",
            "  Number (integer) - The Unique ID of object spawned (returns -1 if failed)\n",
            "Example",
            "  ModBase.SpawnItem(\"Berries\", 0, 0)",
            "  ModBase.SpawnItem(\"CustomFoodType\", 10, 10)",
            "  ModBase.SpawnItem(\"Berries\", 0, 0, true)",
            "  ModBase.SpawnItem(\"Workbench\", 0, 0, false, true, false)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.SpawnItem"
    },
    "ModBase.SpawnLiquid": {
        "body": [
            "ModBase.SpawnLiquid(",
            "\t${1:*LiquidItem},  --string",
            "\t${2:FillableItem}, --string = \"ToolBucket\"",
            "\t${3:NewX},         --int = 0",
            "\t${4:NewY},         --int = 0",
            ")${0}"
        ],
        "description": [
            "Spawn a liquid item in a bucket in game\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  LiquidItem   - String - The item to spawn (Must be a liquid)\n                   - Required",
            "  FillableItem - String - The item to spawn liquid in (Must be\n                   a fillable object) - Defaults to\n                   \"ToolBucket\"",
            "  NewX         - Number (integer) - X Position in tile\n                   coordinates - Defaults to 0",
            "  NewY         - Number (integer) - Y Position in tile\n                   coordinates - Defaults to 0\n",
            "Returns",
            "  Number (integer) - The Unique ID of object spawned (returns -1 if failed)\n",
            "Example",
            "  ModBase.SpawnLiquid(\"Milk\", \"ToolBucket\", 0, 0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.SpawnLiquid"
    },
    "ModBase.UnregisterForItemTypeSpawnedCallback": {
        "body": [
            "ModBase.UnregisterForItemTypeSpawnedCallback(",
            "\t${1:NewTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Unregister for all \"Item type spawned\" related to an item\n  type\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  TypeString - string - the type we no longer watch for\n",
            "Returns",
            "  none\n",
            "Example",
            "  ModBase.UnregisterForItemTypeSpawnedCallback(TypeString)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBase.UnregisterForItemTypeSpawnedCallback"
    },
    "ModBot.DropAllHeldObjects": {
        "body": [
            "ModBot.DropAllHeldObjects(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Drop all objects in Bots hands\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBot.DropAllHeldObjects(3428)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.DropAllHeldObjects"
    },
    "ModBot.DropAllUpgrades": {
        "body": [
            "ModBot.DropAllUpgrades(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Drop all upgrades from Bot\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBot.DropAllUpgrades(3428)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.DropAllUpgrades"
    },
    "ModBot.GetAllBotUIDs": {
        "body": [
            "ModBot.GetAllBotUIDs()"
        ],
        "description": [
            "Get a list of all the Bot unique IDs\n",
            "Version",
            "  135.17\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Table (integer) - A table of all the UIDs of Bots\n",
            "Example",
            "  ModBot.GetAllBotUIDs()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetAllBotUIDs"
    },
    "ModBot.GetAllBotUIDsInGroup": {
        "body": [
            "ModBot.GetAllBotUIDsInGroup(",
            "\t${1:*GroupName}, --string",
            ")${0}"
        ],
        "description": [
            "Get a list of all the Bot unique IDs from a specific Group\n",
            "Version",
            "  135.17\n",
            "Parameters",
            "  GroupName - String - The string name of the group - Required\n",
            "Returns",
            "  Table (integer) - A table of all the UIDs of Bots from the specified group\n",
            "Example",
            "  ModBot.GetAllBotUIDsInGroup()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetAllBotUIDsInGroup"
    },
    "ModBot.GetBotGroupNames": {
        "body": [
            "ModBot.GetBotGroupNames()"
        ],
        "description": [
            "Get a list of all the Bot groups names\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Table (String)\n",
            "Example",
            "  ModBot.GetBotGroupNames()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetBotGroupNames"
    },
    "ModBot.GetHeldObjectUIDs": {
        "body": [
            "ModBot.GetHeldObjectUIDs(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get all the held object unique IDs that the Bot is holding\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  Table (Number Array) - The unique IDs of the objects being held (returns table with first entry as -1 if none found)\n",
            "Example",
            "  heldObjects = ModBot.GetHeldObjectUIDs(345)",
            "  if #heldObjects > 0 then",
            "    -- Do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetHeldObjectUIDs"
    },
    "ModBot.GetIsLearning": {
        "body": [
            "ModBot.GetIsLearning(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Is the Bot learning currently (from provided unique ID)\n",
            "Version",
            "  137.17\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  Boolean - True if learning\n",
            "Example",
            "  State = ModBot.GetIsLearning(6578)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetIsLearning"
    },
    "ModBot.GetIsRunningScript": {
        "body": [
            "ModBot.GetIsRunningScript(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Is the Bot running a script (from provided unique ID)\n",
            "Version",
            "  137.17\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  Boolean - True if running a script\n",
            "Example",
            "  State = ModBot.GetIsRunningScript(6578)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetIsRunningScript"
    },
    "ModBot.GetName": {
        "body": [
            "ModBot.GetName(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get a Bot's name\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  String - Name of the desired Bot\n",
            "Example",
            "  Name = ModBot.GetName(3428)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetName"
    },
    "ModBot.GetParts": {
        "body": [
            "ModBot.GetParts(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get a given Bot's parts (from provided unique ID)\n",
            "Version",
            "  135.20\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  Table (Number) - The Bot's parts [1]=Head,[2]=Frame,[3]=Drive - Or empty strings if bot not found [\"\",\"\",\"\"]\n",
            "Example",
            "  Parts = ModBot.GetParts(6578)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetParts"
    },
    "ModBot.GetScriptSavegameFormat": {
        "body": [
            "ModBot.GetScriptSavegameFormat(",
            "\t${1:UID},       --int",
            "\t${2:LogErrors}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Get Bot script data as a raw JSON string (savegame fragment)\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID       - Number (integer) - The unique identifier for the\n                desired Bot",
            "  LogErrors - Boolean - If True, output any errors to\n                ModLog.txt - Defaults to false\n",
            "Returns",
            "  JSON (string)\n",
            "Example",
            "  json = ModBot.GetScriptSavegameFormat(1234)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n",
            "Warning",
            "  These functions use raw JSON savegame values to read and\n    write bot scripts.\n"
        ],
        "prefix": "ModBot.GetScriptSavegameFormat"
    },
    "ModBot.GetState": {
        "body": [
            "ModBot.GetState(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get a given Bot's state (from provided unique ID)\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  String - The Bot's state\n",
            "Example",
            "  State = ModBot.GetState(6578)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.GetState"
    },
    "ModBot.MoveTo": {
        "body": [
            "ModBot.MoveTo(",
            "\t${1:UID}, --int",
            "\t${2:x},   --int",
            "\t${3:y},   --int",
            ")${0}"
        ],
        "description": [
            "Move a Bot to another location\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired Bot",
            "  x   - Number (integer) - The location to move to in tile\n          coordinates",
            "  y   - Number (integer) - The location to move to in tile\n          coordinates\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBot.MoveTo(3428, 86, 21)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.MoveTo"
    },
    "ModBot.RechargeBot": {
        "body": [
            "ModBot.RechargeBot(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Recharge Bot\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID  - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBot.RechargeBot(1234)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.RechargeBot"
    },
    "ModBot.SetName": {
        "body": [
            "ModBot.SetName(",
            "\t${1:UID},     --int",
            "\t${2:NewName}, --string",
            ")${0}"
        ],
        "description": [
            "Set a Bot's name\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  UID     - Number (integer) - The unique identifier for the\n              desired Bot",
            "  NewName - String - Name for the desired Bot to be set\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBot.SetName(3428, \"Gary\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.SetName"
    },
    "ModBot.SetScriptSavegameFormat": {
        "body": [
            "ModBot.SetScriptSavegameFormat(",
            "\t${1:UID},       --int",
            "\t${2:JSON},      --string",
            "\t${3:LogErrors}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Set Bot data from a raw JSON string (savegame fragment)\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID        - Number (integer) - The unique identifier for\n                the desired Bot",
            "  JSON      - String (JSON) - Raw script data in JSON format",
            "  LogErrors - Boolean - If True, output any errors to\n                ModLog.txt - Defaults to false\n",
            "Returns",
            "  Boolean - True if Bot script set successfully\n",
            "Example",
            "  -- Create a wait instruction based on a variable...",
            "  seconds = 60",
            "  ModBot.SetScriptSavegameFormat(1234,'[{\"Type\":\"InstructionWa\n    it\",\"ArgName\":\"\",\"Line\":-1,\"OT\":\"Plot\",\"UID\":0,\"X\":0,\"Y\"\n    :0,\"V1\":\"'..seconds..'\",\"V2\":\"\",\"A\":\"MoveTo\",\"R\":\"\",\"AT\"\n    :0,\"AOT\":\"Total\"}]')\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n",
            "Warning",
            "  Recommend programming a bot first and using\n    GetScriptSavegameFormat to create a JSON template. Keep\n    it simple and take care to avoid bot script corruption\n    (double check any variables you want to plug into the\n    JSON are valid before you call this).\n"
        ],
        "prefix": "ModBot.SetScriptSavegameFormat"
    },
    "ModBot.StartScript": {
        "body": [
            "ModBot.StartScript(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Start Bot script\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID  - Number (integer) - The unique identifier for the\n          desired Bot\n",
            "Example",
            "  ModBot.StartScript(1234)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.StartScript"
    },
    "ModBot.StopScript": {
        "body": [
            "ModBot.StopScript(",
            "\t${1:UID},      --int",
            "\t${2:Graceful}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Bot script will stop after the current action completes\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID       - Number (integer) - The unique identifier for the\n               desired Bot",
            "  Graceful - Boolean - If True, perform all actions within the\n               outermost loop before stopping - Defaults to\n               false\n",
            "Example",
            "  ModBot.StopScript(1234)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBot.StopScript"
    },
    "ModBuilding.AddEnergy": {
        "body": [
            "ModBuilding.AddEnergy(",
            "\t${1:*UID},          --int",
            "\t${2:*EnergyAmount}, --float",
            "\t${3:SetToMax},      --bool = false",
            ")${0}"
        ],
        "description": [
            "Add Energy to a Power Building (e.g. Windmill,\n  GiantWaterWheel, StationaryEngine)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID          - Number (integer) - the unique ID of the power\n                   building object - Required",
            "  EnergyAmount - Number (float) - energy to add to building -\n                   Required",
            "  SetToMax     - Boolean - if energy should be filled to max\n                   capacity - Defaults to false\n",
            "Returns",
            "  Boolean - True if successfully added to energy\n",
            "Example",
            "  Amount = ModBuilding.AddEnergy(ObjId, 5, false)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.AddEnergy"
    },
    "ModBuilding.AddFuel": {
        "body": [
            "ModBuilding.AddFuel(",
            "\t${1:*UID},        --int",
            "\t${2:*FuelAmount}, --float",
            "\t${3:SetToMax},    --bool = false",
            ")${0}"
        ],
        "description": [
            "Add Fuel to a Building that allows it (e.g.\n  TrainRefuellingStation, StationaryEngine)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID        - Number (integer) - the unique ID of the\n                 building object - Required",
            "  FuelAmount - Number (float) - Fuel to add to building -\n                 Required",
            "  SetToMax   - Boolean - if Fuel should be filled to max\n                 capacity - Defaults to false\n",
            "Returns",
            "  Boolean - True if successfully added to the Fuel\n",
            "Example",
            "  Amount = ModBuilding.AddFuel(ObjId, 10, false)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.AddFuel"
    },
    "ModBuilding.AddHay": {
        "body": [
            "ModBuilding.AddHay(",
            "\t${1:*UID},       --int",
            "\t${2:*HayAmount}, --float",
            "\t${3:SetToMax},   --bool = false",
            ")${0}"
        ],
        "description": [
            "Add Hay to a Building that allows it (e.g. Trough)\n",
            "Version",
            "  ??????\n",
            "Parameters",
            "  UID       - Number (integer) - the unique ID of the building\n                object - Required",
            "  HayAmount - Number (float) - hay to add to building -\n                Required",
            "  SetToMax  - Boolean - if building hay should be filled to\n                max capacity - Defaults to false\n",
            "Returns",
            "  Boolean - True if successfully added to the building\n",
            "Example",
            "  Amount = ModBuilding.AddHay(ObjId, 10, false)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.AddHay"
    },
    "ModBuilding.AddWater": {
        "body": [
            "ModBuilding.AddWater(",
            "\t${1:*UID},         --int",
            "\t${2:*WaterAmount}, --float",
            "\t${3:SetToMax},     --bool = false",
            ")${0}"
        ],
        "description": [
            "Add Water to a Building that allows it (e.g.\n  TrainRefuellingStation, StationaryEngine)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID         - Number (integer) - the unique ID of the\n                  building object - Required",
            "  WaterAmount - Number (float) - water to add to building -\n                  Required",
            "  SetToMax    - Boolean - if water should be filled to max\n                  capacity - Defaults to false\n",
            "Returns",
            "  Boolean - True if successfully added to the water\n",
            "Example",
            "  Amount = ModBuilding.AddWater(ObjId, 10, false)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.AddWater"
    },
    "ModBuilding.CreateBuilding": {
        "body": [
            "ModBuilding.CreateBuilding(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[]",
            "\t${3:NewIngredientsAmountArr}, --int[]",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:TL},                      --int[] = null",
            "\t${6:BR},                      --int[] = null",
            "\t${7:Access},                  --int[] = null",
            "\t${8:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom building\n",
            "Version",
            "  134.29\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              building - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the building\n                              - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'BlockWall' Model",
            "  TL                      - Number (integer) array - Top Left\n                              ground coordinates of the\n                              building (for area) e.g.\n                              (-1,-1) - Defaults to none",
            "  BR                      - Number (integer) array - Bottom\n                              Right ground coordinates of\n                              the building (for area) e.g.\n                              (2,0) - Defaults to none",
            "  Access                  - Number (integer) array - Access\n                              point ground coordinates of\n                              the building e.g. (1,1) -\n                              Defaults to none",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBuilding.CreateBuilding(\"Building1\") -- Default Model",
            "  ModBuilding.CreateBuilding(\"Building2\", {\"Stick\"}, {1}) --\n    Default Model",
            "  ModBuilding.CreateBuilding(\"Building3\", {\"Stick\"}, {1},\n    \"Models/Buildings/BrickWall\", {-1,-1}, {1,0}, {0,1},\n    false) -- In Game Model",
            "  ModBuilding.CreateBuilding(\"Building4\", {\"Stick\"}, {1},\n    \"ObjCrates/wooden boxes pack\", {-1,-1}, {1,0}, {0,1},\n    true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModBuilding.CreateBuilding"
    },
    "ModBuilding.GetBuildingCoveringTile": {
        "body": [
            "ModBuilding.GetBuildingCoveringTile(",
            "\t${1:*PosX},               --int",
            "\t${2:*PosY},               --int",
            "\t${3:AllowFlooring},       --bool = false",
            "\t${4:AllowWalls},          --bool = false",
            "\t${5:AllowFootprintTiles}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Get the Unique ID of the building that covers the provided\n  tile coordinates\n",
            "Version",
            "  136.25\n",
            "Parameters",
            "  PosX                - Number (integer) - The location to\n                          check (X) - Required",
            "  PosY                - Number (integer) - The location to\n                          check (Y) - Required",
            "  AllowFlooring       - Boolean - Allow flooring in the check?\n                          - Defaults to false",
            "  AllowWalls          - Boolean - Allow walls in the check? -\n                          Defaults to false",
            "  AllowFootprintTiles - Boolean - Allow the\n                          spawn/in/out/footprint tiles of\n                          the building in the check? -\n                          Defaults to false\n",
            "Returns",
            "  Number - (integer) - The UID of the building sitting on coordinate provided (-1 if none)\n",
            "Example",
            "  UID = ModBuilding.GetBuildingCoveringTile(50,80)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.GetBuildingCoveringTile"
    },
    "ModBuilding.GetBuildingUIDsByName": {
        "body": [
            "ModBuilding.GetBuildingUIDsByName(",
            "\t${1:*DesiredName}, --string",
            ")${0}"
        ],
        "description": [
            "Get the unique IDs of buildings matching the desired name\n  provided\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  DesiredName - String - Name of the building to search for -\n                  Required\n",
            "Returns",
            "  Table (Number - integer) - An array of all the unique IDs of all the buildings with specified name\n",
            "Example",
            "  UIDs = ModBuilding.GetBuildingUIDsByName(\"Workbench\")",
            "  if #UIDs > 0 then",
            "    -- Do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.GetBuildingUIDsByName"
    },
    "ModBuilding.GetFuelMaxCapacity": {
        "body": [
            "ModBuilding.GetFuelMaxCapacity(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the maximum Fuel capacity of a Building that allows it\n  (e.g. TrainRefuellingStation, StationaryEngine)\n",
            "Version",
            "  137.21\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the building\n          object - Required\n",
            "Returns",
            "  float - fuel capacity\n",
            "Example",
            "  Amount = ModBuilding.GetFuelMaxCapacity(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.GetFuelMaxCapacity"
    },
    "ModBuilding.GetRotation": {
        "body": [
            "ModBuilding.GetRotation(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get a building rotation\n",
            "Version",
            "  137.21\n",
            "Parameters",
            "  UID - Number (integer) - The unique ID of the building\n          object - Required\n",
            "Returns",
            "  int - The rotation of the building between 0 and 3 (or -1 if there's an error)\n",
            "Example",
            "  NewRotation = ModBuilding.GetRotation(ObjID)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.GetRotation"
    },
    "ModBuilding.IsBuildingActuallyFlooring": {
        "body": [
            "ModBuilding.IsBuildingActuallyFlooring(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get if this building is actually of type flooring (Flooring\n  is a type of building)\n",
            "Version",
            "  135.20\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the building -\n          Required\n",
            "Returns",
            "  Boolean - True if the building is flooring. Returns false if item is not flooring OR object not found\n",
            "Example",
            "  ModBuilding.IsBuildingActuallyFlooring(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.IsBuildingActuallyFlooring"
    },
    "ModBuilding.IsBuildingSaveable": {
        "body": [
            "ModBuilding.IsBuildingSaveable(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get boolean of if building can be saved (is not a temp\n  building)\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID - Number (integer) - The unique ID of the building\n          object - Required\n",
            "Returns",
            "  bool - whether or not the UID is a saveable building\n",
            "Example",
            "  IsSaveable = ModBuilding.IsBuildingSaveable(ObjID)\n",
            "Note",
            "  Can be used in functions: OnUpdate()\n"
        ],
        "prefix": "ModBuilding.IsBuildingSaveable"
    },
    "ModBuilding.RegisterForBuildingEditedCallback": {
        "body": [
            "ModBuilding.RegisterForBuildingEditedCallback(",
            "\t${1:*BuildingUID}, --int",
            "\t${2:Callback},     --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for a building edited callback\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  BuildingUID - Number (integer) - The unique ID of the\n                  building object - Required",
            "  Callback    - Function to be called when building is edited\n                  (EditType: Rotate, Move, Rename, Destroy)\n",
            "Returns",
            "  none\n",
            "Example",
            "  ModBuilding.RegisterForBuildingEditedCallback(BuildingUID,\n    CallbackFunction)",
            "  CallbackFunction will be called like:\n    CallbackFunction(BuildingUID, EditType, NewValue)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.RegisterForBuildingEditedCallback"
    },
    "ModBuilding.RegisterForBuildingStateChangedCallback": {
        "body": [
            "ModBuilding.RegisterForBuildingStateChangedCallback(",
            "\t${1:BuildingUID}, --int",
            "\t${2:Callback},    --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for a callback when building state changes\n",
            "Version",
            "  ?????\n",
            "Parameters",
            "  BuildingUID - Int - The UID of the building",
            "  Callback    - Function to be called when building state\n                  changes\n",
            "Returns",
            "  none\n",
            "Note",
            "  Can be used in functions: OnUpdate()\n"
        ],
        "prefix": "ModBuilding.RegisterForBuildingStateChangedCallback"
    },
    "ModBuilding.RegisterForBuildingTypeSpawnedCallback": {
        "body": [
            "ModBuilding.RegisterForBuildingTypeSpawnedCallback(",
            "\t${1:NewTypeString}, --string",
            "\t${2:Callback},      --DynValue",
            ")${0}"
        ],
        "description": [
            "Register for a callback when building of type spawned\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  ObjectType - String - The 'Type' of building",
            "  Callback   - Function to be called when building is\n                 destroyed\n",
            "Returns",
            "  none\n",
            "Example",
            "  ModBuilding.RegisterForBuildingTypeSpawnedCallback(ObjectTyp\n    e, CallbackFunction)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.RegisterForBuildingTypeSpawnedCallback"
    },
    "ModBuilding.RegisterForNewBuildingInAreaCallback": {
        "body": [
            "ModBuilding.RegisterForNewBuildingInAreaCallback(",
            "\t${1:StartX},    --int",
            "\t${2:StartY},    --int",
            "\t${3:EndX},      --int",
            "\t${4:EndY},      --int",
            "\t${5:*Callback}, --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback for when a building is moved into or\n  created within a specific area\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  StartX           - int",
            "  StartY           - int",
            "  EndX             - int",
            "  EndY             - int",
            "  CallbackFunction - Function - The function to callback to on\n                       event - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBuilding.RegisterForNewBuildingInAreaCallback(StartX,\n    StartY, EndX, EndY, NewBuildingInAreaCallback)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.RegisterForNewBuildingInAreaCallback"
    },
    "ModBuilding.SetBuildingName": {
        "body": [
            "ModBuilding.SetBuildingName(",
            "\t${1:*UID},          --int",
            "\t${2:*BuildingName}, --string",
            ")${0}"
        ],
        "description": [
            "Set a building name\n",
            "Version",
            "  137.19\n",
            "Parameters",
            "  UID          - Number (integer) - The unique ID of the\n                   building object - Required",
            "  BuildingName - String - New name for the building - Required\n",
            "Returns",
            "  Boolean - True if successfully set\n",
            "Example",
            "  ModBuilding.SetBuildingName(ObjID, \"MyCoolBuilding\")\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.SetBuildingName"
    },
    "ModBuilding.SetBuildingWalkable": {
        "body": [
            "ModBuilding.SetBuildingWalkable(",
            "\t${1:*NewTypeString},      --string",
            "\t${2:*CanBeWalkedThrough}, --bool",
            ")${0}"
        ],
        "description": [
            "Set a building to be walked through (like a door/arch)\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  NewTypeString      - String - The building type to search\n                         for - Required",
            "  CanBeWalkedThrough - Boolean - If this custom building can\n                         be walked through - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBuilding.SetBuildingWalkable(\"FancyDoor\", true)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.SetBuildingWalkable"
    },
    "ModBuilding.SetRotation": {
        "body": [
            "ModBuilding.SetRotation(",
            "\t${1:*UID},      --int",
            "\t${2:*Rotation}, --int",
            ")${0}"
        ],
        "description": [
            "Set a building rotation\n",
            "Version",
            "  137.21\n",
            "Parameters",
            "  UID      - Number (integer) - The unique ID of the building\n               object - Required",
            "  Rotation - int - New rotation for the building between 0 and\n               3 - Required\n",
            "Returns",
            "  Boolean - True if successfully set\n",
            "Example",
            "  ModBuilding.SetRotation(ObjID, 2)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.SetRotation"
    },
    "ModBuilding.ShowBuildingAccessPoint": {
        "body": [
            "ModBuilding.ShowBuildingAccessPoint(",
            "\t${1:*NewTypeString},     --string",
            "\t${2:*EnableAccessPoint}, --bool",
            ")${0}"
        ],
        "description": [
            "Set a building access point to be visible/invisible\n",
            "Version",
            "  137.18\n",
            "Parameters",
            "  NewTypeString     - String - The building type to search for\n                        - Required",
            "  EnableAccessPoint - Boolean - If this custom building access\n                        point is enabled (visible) -\n                        Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBuilding.ShowBuildingAccessPoint(\"FancyDoor\", true)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad()\n"
        ],
        "prefix": "ModBuilding.ShowBuildingAccessPoint"
    },
    "ModBuilding.UnregisterForBuildingEditedCallback": {
        "body": [
            "ModBuilding.UnregisterForBuildingEditedCallback(",
            "\t${1:*BuildingUID}, --int",
            ")${0}"
        ],
        "description": [
            "Unregister for a building edited callback\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  BuildingUID - Number (integer) - The unique ID of the\n                  building object - Required\n",
            "Returns",
            "  none\n",
            "Example",
            "  ModBuilding.UnregisterForBuildingEditedCallback(BuildingUID)\n",
            "Note",
            "  Can be used in functions: Creation(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.UnregisterForBuildingEditedCallback"
    },
    "ModBuilding.UnregisterForNewBuildingInAreaCallback": {
        "body": [
            "ModBuilding.UnregisterForNewBuildingInAreaCallback(",
            "\t${1:StartX}, --int",
            "\t${2:StartY}, --int",
            "\t${3:EndX},   --int",
            "\t${4:EndY},   --int",
            ")${0}"
        ],
        "description": [
            "Unregister a callback for when a building is moved into or\n  created within a specific area\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  StartX - int",
            "  StartY - int",
            "  EndX   - int",
            "  EndY   - int\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModBuilding.UnregisterForNewBuildingInAreaCallback(TileX,\n    TileY)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModBuilding.UnregisterForNewBuildingInAreaCallback"
    },
    "ModConverter.AddFuelToSpecifiedConverter": {
        "body": [
            "ModConverter.AddFuelToSpecifiedConverter(",
            "\t${1:*UID},  --int",
            "\t${2:*Fuel}, --float",
            ")${0}"
        ],
        "description": [
            "Add Fuel to a converter (Fueler)\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  UID  - Number (integer) - the unique ID of the converter\n           (Fueler) object - Required",
            "  Fuel - Number (float) - How much fuel to add - Required\n",
            "Returns",
            "  Boolean - True if added to converter [NOTE: Returns false if failed OR trying to add more fuel than capacity allows]\n",
            "Example",
            "  Success = ModConverter.AddFuelToSpecifiedConverter(ObjId, 2)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.AddFuelToSpecifiedConverter"
    },
    "ModConverter.AddIngredientToSpecifiedConverter": {
        "body": [
            "ModConverter.AddIngredientToSpecifiedConverter(",
            "\t${1:*UID},              --int",
            "\t${2:*IngredientString}, --string",
            ")${0}"
        ],
        "description": [
            "Add an ingredient to a converter\n",
            "Version",
            "  135.16\n",
            "Parameters",
            "  UID              - Number (integer) - the unique ID of the\n                       converter object - Required",
            "  IngredientString - String - The ingredient to search for -\n                       Required\n",
            "Returns",
            "  Boolean - True if the Ingredient was added to converter\n",
            "Example",
            "  Success =\n    ModConverter.AddIngredientToSpecifiedConverter(ObjId,\n    \"Berries\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.AddIngredientToSpecifiedConverter"
    },
    "ModConverter.AreConverterRequrementsMet": {
        "body": [
            "ModConverter.AreConverterRequrementsMet(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Have the requirements been met for provided converter\n",
            "Version",
            "  136.27\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the converter\n          object - Required\n",
            "Returns",
            "  Boolean - True if converter requirements met\n",
            "Example",
            "  ModConverter.AreConverterRequrementsMet(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.AreConverterRequrementsMet"
    },
    "ModConverter.CreateConverter": {
        "body": [
            "ModConverter.CreateConverter(",
            "\t${1:*UniqueName},             --string",
            "\t${2:RecipeStringArr},         --string[]",
            "\t${3:NewIngredientsStringArr}, --string[]",
            "\t${4:NewIngredientsAmountArr}, --int[]",
            "\t${5:ModelName},               --string = \"\"",
            "\t${6:TL},                      --int[] = null",
            "\t${7:BR},                      --int[] = null",
            "\t${8:Access},                  --int[] = null",
            "\t${9:Spawn},                   --int[] = null",
            "\t${10:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom converter\n",
            "Version",
            "  134.29\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              converter - Required",
            "  RecipeStringArr         - String array - List of recipes\n                              allowed in this converter -\n                              Defaults to none",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the converter\n                              - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Workbench' Model",
            "  TL                      - Number (integer) array - Top Left\n                              ground coordinates of the\n                              converter (for area) e.g.\n                              (-1,-1) - Defaults to none",
            "  BR                      - Number (integer) array - Bottom\n                              Right ground coordinates of\n                              the converter (for area) e.g.\n                              (2,0) - Defaults to none",
            "  Access                  - Number (integer) array - Access\n                              point (for the farmer player)\n                              ground coordinates of the\n                              converter e.g. (1,1) -\n                              Defaults to none",
            "  Spawn                   - Number (integer) array - Spawn\n                              point (of the item) ground\n                              coordinates of the converter\n                              e.g. (2,1) - Defaults to none",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModConverter.CreateConverter(\"BerryMaker\", {\"Berries\"},\n    {\"Pole\"}, {1}) -- Default Model",
            "  ModConverter.CreateConverter(\"Colonist Converter\",\n    {\"Cupcake\"}, {\"Folk\"}, {4}, \"\", {-1,-1}, {1,0}, {0,1},\n    {1,1}) -- Default Model, Using Custom Food \"Cupcake\" as\n    Ingredient",
            "  ModConverter.CreateConverter(\"Colonist Cupcakes Maker\",\n    {\"Cupcake\"}, {\"Folk\"}, {4},\n    \"Models/Buildings/Converters/Workbench\", {-1,-1}, {1,0},\n    {0,1}, {1,1}, false)       -- In Game Model",
            "  ModConverter.CreateConverter(\"Mega Maker\", {\"Colonist\n    Cupcake\",\"Berries\"}, {\"Crate3\"}, {4}, \"ObjCrates/wooden\n    boxes pack\", {-1,-1}, {1,0}, {0,1}, {1,1}) -- Custom\n    Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModConverter.CreateConverter"
    },
    "ModConverter.GetConverterProperties": {
        "body": [
            "ModConverter.GetConverterProperties(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the properties of a given converter providing the\n  object's unique ID\n",
            "Version",
            "  136.27\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the converter -\n          Required\n",
            "Returns",
            "  Table (Mixed) - Properties:\n",
            "Example",
            "  Info = ModConverter.GetConverterProperties(ObjId)",
            "  if #Info > 0 then",
            "    -- do something\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.GetConverterProperties"
    },
    "ModConverter.GetFuelMaxCapacity": {
        "body": [
            "ModConverter.GetFuelMaxCapacity(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get max Fuel capacity (in a Fueler Converter)\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the converter\n          (Fueler) object - Required\n",
            "Returns",
            "  Number (float) - The amount of fuel allowed in fueler (Returns -1 if error)\n",
            "Example",
            "  Max = ModConverter.GetFuelMaxCapacity(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.GetFuelMaxCapacity"
    },
    "ModConverter.GetFuelQuantity": {
        "body": [
            "ModConverter.GetFuelQuantity(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get current Fuel quantity (in a Fueler Converter)\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the converter\n          (Fueler) object - Required\n",
            "Returns",
            "  Number (float) - The amount of fuel in fueler (Returns -1 if error)\n",
            "Example",
            "  Amount = ModConverter.GetFuelQuantity(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModConverter.GetFuelQuantity"
    },
    "ModCustom.RegisterForCustomCallback": {
        "body": [
            "ModCustom.RegisterForCustomCallback(",
            "\t${1:*UniqueName},   --string",
            "\t${2:*CallbackType}, --string",
            "\t${3:*Callback},     --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback on specific events for a custom item\n",
            "Version",
            "  135.18\n",
            "Parameters",
            "  UniqueName       - String - The unique name of the custom\n                       item - Required",
            "  CallbackType     - String - The type of callback to register\n                       for - Required [FoodConsumed,\n                       ClothingTopAdded, ClothingTopRemoved,\n                       ClothingHatAdded, ClothingHatRemoved,\n                       ConverterCreateItem,\n                       ConverterComplete, HoldablePickedUp,\n                       HoldableDroppedOnGround,\n                       AddedToConverter]",
            "  CallbackFunction - Function - The function to callback to on\n                       event - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModFood.RegisterForCustomCallback(\"Cupcake\", \"FoodConsumed\",\n    FoodCallbackFunction) -- The start e.g. 'ModFood' MUST\n    match the type of custom object (Like ModConverter if\n    it's a custom converter)",
            "  ModConverter.RegisterForCustomCallback(\"Butcher\",\n    \"ConverterComplete\", CallbackFunction)",
            "  ModHoldable.RegisterForCustomCallback(\"Raw Meat\",\n    \"AddedToConverter\", CallbackFunction)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.RegisterForCustomCallback"
    },
    "ModCustom.UpdateModelParameters": {
        "body": [
            "ModCustom.UpdateModelParameters(",
            "\t${1:*UniqueName}, --string",
            "\t${2:Scale},       --float = 1f",
            "\t${3:RotX},        --float = 0f",
            "\t${4:RotY},        --float = 0f",
            "\t${5:RotZ},        --float = 0f",
            "\t${6:TransX},      --float = 0f",
            "\t${7:TransY},      --float = 0f",
            "\t${8:TransZ},      --float = 0f",
            ")${0}"
        ],
        "description": [
            "Update custom model parameters (All parameters - scale,\n  rotation and translation)\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UniqueName - String - The unique name of the custom item -\n                 Required",
            "  Scale      - Number (float) - Scale of the model - Defaults\n                 to 1",
            "  RotX       - Number (float) - Rotation (X) of the model -\n                 Defaults to 0",
            "  RotY       - Number (float) - Rotation (Y) of the model -\n                 Defaults to 0",
            "  RotZ       - Number (float) - Rotation (Z) of the model -\n                 Defaults to 0",
            "  TransX     - Number (float) - Translation (X) of the model -\n                 Defaults to 0",
            "  TransY     - Number (float) - Translation (Y) of the model -\n                 Defaults to 0",
            "  TransZ     - Number (float) - Translation (Z) of the model -\n                 Defaults to 0\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModFood.UpdateModelParameters(\"Cupcake\", 0.2, -90,0,0,\n    0,0,1)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.UpdateModelParameters"
    },
    "ModCustom.UpdateModelRotation": {
        "body": [
            "ModCustom.UpdateModelRotation(",
            "\t${1:*UniqueName}, --string",
            "\t${2:RotX},        --float = 0f",
            "\t${3:RotY},        --float = 0f",
            "\t${4:RotZ},        --float = 0f",
            ")${0}"
        ],
        "description": [
            "Update custom model rotation only\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UniqueName - String - The unique name of the custom item -\n                 Required",
            "  RotX       - Number (float) - Rotation (X) of the model -\n                 Defaults to 0",
            "  RotY       - Number (float) - Rotation (Y) of the model -\n                 Defaults to 0",
            "  RotZ       - Number (float) - Rotation (Z) of the model -\n                 Defaults to 0\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModFood.UpdateModelRotation(\"Cupcake\", -90,0,0)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.UpdateModelRotation"
    },
    "ModCustom.UpdateModelScale": {
        "body": [
            "ModCustom.UpdateModelScale(",
            "\t${1:*UniqueName}, --string",
            "\t${2:Scale},       --float = 1f",
            ")${0}"
        ],
        "description": [
            "Update custom model scale only\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UniqueName - String - The unique name of the custom item -\n                 Required",
            "  Scale      - Number (float) - Scale of the model - Defaults\n                 to 1\n",
            "Example",
            "  ModFood.UpdateModelScale(\"Cupcake\", 0.2)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.UpdateModelScale"
    },
    "ModCustom.UpdateModelScaleSplit": {
        "body": [
            "ModCustom.UpdateModelScaleSplit(",
            "\t${1:*UniqueName}, --string",
            "\t${2:ScaleX},      --float = 1f",
            "\t${3:ScaleY},      --float = 1f",
            "\t${4:ScaleZ},      --float = 1f",
            ")${0}"
        ],
        "description": [
            "Update custom model scale only (Defining each of the axes)\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UniqueName - String - The unique name of the custom item -\n                 Required",
            "  ScaleX     - Number (float) - X Scale of the model -\n                 Defaults to 1",
            "  ScaleY     - Number (float) - Y Scale of the model -\n                 Defaults to 1",
            "  ScaleZ     - Number (float) - Z Scale of the model -\n                 Defaults to 1\n",
            "Example",
            "  ModFood.UpdateModelScaleSplit(\"Cupcake\", 1,1,1)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.UpdateModelScaleSplit"
    },
    "ModCustom.UpdateModelTranslation": {
        "body": [
            "ModCustom.UpdateModelTranslation(",
            "\t${1:*UniqueName}, --string",
            "\t${2:TransX},      --float = 0f",
            "\t${3:TransY},      --float = 0f",
            "\t${4:TransZ},      --float = 0f",
            ")${0}"
        ],
        "description": [
            "Update custom model translation only\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UniqueName - String - The unique name of the custom item -\n                 Required",
            "  TransX     - Number (float) - Translation (X) of the model -\n                 Defaults to 0",
            "  TransY     - Number (float) - Translation (X) of the model -\n                 Defaults to 0",
            "  TransZ     - Number (float) - Translation (X) of the model -\n                 Defaults to 0\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModFood.UpdateModelTranslation(\"Cupcake\", 20,5,0)\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModCustom.UpdateModelTranslation"
    },
    "ModDebug.ClearLog": {
        "body": [
            "ModDebug.ClearLog()"
        ],
        "description": [
            "Clears the Debug log output file\n",
            "Version",
            "  134.21\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModDebug.ClearLog()\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModDebug.ClearLog"
    },
    "ModDebug.IsDevMode": {
        "body": [
            "ModDebug.IsDevMode()"
        ],
        "description": [
            "Returns Dev Mode status - recommend calling this once in\n  BeforeLoad() and storing the result\n",
            "Version",
            "  ?????\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Boolean - True if Dev Mode enabled\n",
            "Example",
            "  function BeforeLoad()",
            "    DevMode = ModDebug.IsDevMode()",
            "    if DevMode then",
            "      ModDebug.Log(\"Dev Mode detected\")",
            "      Cheats = true",
            "      AnimationTime = 1",
            "      SkipIntroPopups = true",
            "    end",
            "  end\n",
            "Note",
            "  Can be used in functions: BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModDebug.IsDevMode"
    },
    "ModDebug.Log": {
        "body": [
            "ModDebug.Log(",
            "\t${1:object[]}, --params",
            ")${0}"
        ],
        "description": [
            "Logs information to the Debug log output file\n",
            "Version",
            "  134.21\n",
            "Parameters",
            "  VArgs - Any data requiring logging\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModDebug.Log(\"Hello World!\")",
            "  ModDebug.Log(\"My var is \", amazingVar)\n",
            "Note",
            "  Can be used in functions: Creation(), Expose(), BeforeLoad(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n",
            "Warning",
            "  Only local mods can generate debug logs and files are\n    limited to 1MB.",
            "  Each mod may also generate a separate error log to capture\n    modding API bugs. If your mod is generating an error\n    log, please share it to Discord #bugs channel.\n"
        ],
        "prefix": "ModDebug.Log"
    },
    "ModDecorative.CreateDecorative": {
        "body": [
            "ModDecorative.CreateDecorative(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[]",
            "\t${3:NewIngredientsAmountArr}, --int[]",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom decorative item\n",
            "Version",
            "  134.29\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              decorative - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the\n                              decorative - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'BrickHut' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModDecorative.CreateDecorative(\"Deco1\") -- Default Model",
            "  ModDecorative.CreateDecorative(\"Deco2\", {\"Stick\"}, {1}) --\n    Default Model",
            "  ModDecorative.CreateDecorative(\"Deco3\", {\"Stick\"}, {1},\n    \"Models/Buildings/Wonders/StoneHeads\", false) -- In Game\n    Model",
            "  ModDecorative.CreateDecorative(\"Deco4\", {\"Stick\"}, {1},\n    \"ObjCrates/wooden boxes pack\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModDecorative.CreateDecorative"
    },
    "ModEducation.CreateEducation": {
        "body": [
            "ModEducation.CreateEducation(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom Education item, one the player can use as an\n  Education item\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              Education - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the Education\n                              - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Book1' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModEducation.CreateEducation(\"Education1\") -- Default Model",
            "  ModEducation.CreateEducation(\"Education2\", {\"Stick\"}, {1})--\n    Default Model",
            "  ModEducation.CreateEducation(\"Education3\", {\"Stick\"}, {1},\n    \"Models/Education/EducationBook1\", false) -- In Game\n    Model",
            "  ModEducation.CreateEducation(\"Education4\", {\"Stick\"}, {1},\n    \"Books/Dictionary\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModEducation.CreateEducation"
    },
    "ModFood.CreateFood": {
        "body": [
            "ModFood.CreateFood(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom food item, one the player can pickup, move\n  about and use as a food\n",
            "Version",
            "  134.28\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the food\n                              - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the food -\n                              Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Apple' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModFood.CreateFood(\"Cupcake\") -- Default Model",
            "  ModFood.CreateFood(\"Cupcake\", {\"Folk\"}, {1})-- Default Model",
            "  ModFood.CreateFood(\"Cupcake\", {\"Folk\"}, {1},\n    \"Models/Food/AppleJam\", false) -- In Game Model",
            "  ModFood.CreateFood(\"Cupcake\", {\"Folk\"}, {1},\n    \"Cupcake/Cupcake_v1\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModFood.CreateFood"
    },
    "ModGoTo.CreateGoTo": {
        "body": [
            "ModGoTo.CreateGoTo(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom goto item, one that can move about with\n  pathfinding\n",
            "Version",
            "  135.8\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the goto\n                              - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the goto -\n                              Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Minecart' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModGoTo.CreateGoTo(\"SuperCart\") -- Default Model",
            "  ModGoTo.CreateGoTo(\"SuperCart\", {\"Folk\"}, {1})-- Default\n    Model",
            "  ModGoTo.CreateGoTo(\"SuperCart\", {\"Folk\"}, {1},\n    \"Models/Vehicles/Minecart\", false) -- In Game Model",
            "  ModGoTo.CreateGoTo(\"SuperCart\", {\"Folk\"}, {1},\n    \"Cupcake/Cupcake_v1\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModGoTo.CreateGoTo"
    },
    "ModGoTo.MoveTo": {
        "body": [
            "ModGoTo.MoveTo(",
            "\t${1:UID}, --int",
            "\t${2:x},   --int",
            "\t${3:y},   --int",
            ")${0}"
        ],
        "description": [
            "Move a GoTo to another location\n",
            "Version",
            "  135.8\n",
            "Parameters",
            "  UID - Number (integer) - The unique identifier for the\n          desired GoTo",
            "  x   - Number (integer) - The location to move to in tile\n          coordinates",
            "  y   - Number (integer) - The location to move to in tile\n          coordinates\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModGoTo.MoveTo(3428, 86, 21)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModGoTo.MoveTo"
    },
    "ModHat.CreateHat": {
        "body": [
            "ModHat.CreateHat(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom hat item, one the player can use as a hat\n",
            "Version",
            "  135.8\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the hat\n                              - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the hat -\n                              Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Dinosaur' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModHat.CreateHat(\"Hat1\") -- Default Model",
            "  ModHat.CreateHat(\"Hat2\", {\"Wool\"}, {1})-- Default Model",
            "  ModHat.CreateHat(\"Hat3\", {\"Wool\"}, {1},\n    \"Models/Clothes/Hats/HatFox\", false) -- In Game Model",
            "  ModHat.CreateHat(\"Hat4\", {\"Wool\"}, {1}, \"Wool/Hat\", true) --\n    Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModHat.CreateHat"
    },
    "ModHoldable.CreateHoldable": {
        "body": [
            "ModHoldable.CreateHoldable(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[]",
            "\t${3:NewIngredientsAmountArr}, --int[]",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom holdable item, one the player can pickup and\n  move about\n",
            "Version",
            "  134.28\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              holdable - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the holdable\n                              - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Butter' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModHoldable.CreateHoldable(\"Crate1\") -- Default Model",
            "  ModHoldable.CreateHoldable(\"Crate2\", {\"Stick\"}, {1}) --\n    Default Model",
            "  ModHoldable.CreateHoldable(\"Crate3\", {\"Stick\"}, {1},\n    \"Models/Food/AppleJam\", false) -- In Game Model",
            "  ModHoldable.CreateHoldable(\"Crate4\", {\"Stick\"}, {1},\n    \"ObjCrates/wooden boxes pack\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModHoldable.CreateHoldable"
    },
    "ModMedicine.CreateMedicine": {
        "body": [
            "ModMedicine.CreateMedicine(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom Medicine item, one the player can use as a\n  medicine\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the\n                              medicine - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the medicine\n                              - Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'MedicineFlowers' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModMedicine.CreateMedicine(\"Medicine1\") -- Default Model",
            "  ModMedicine.CreateMedicine(\"Medicine2\", {\"Berries\"}, {1})--\n    Default Model",
            "  ModMedicine.CreateMedicine(\"Medicine3\", {\"Berries\"}, {1},\n    \"Models/Medicine/MedicineFlowers\", false) -- In Game\n    Model",
            "  ModMedicine.CreateMedicine(\"Medicine4\", {\"Berries\"}, {1},\n    \"Pills/Medicine\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModMedicine.CreateMedicine"
    },
    "ModObject.AddMaterialsToCache": {
        "body": [
            "ModObject.AddMaterialsToCache(",
            "\t${1:FilePath}, --string",
            ")${0}"
        ],
        "description": [
            "Add materials to a cache for later use with\n  SetNodeMaterial().\n",
            "Version",
            "  ??????\n",
            "Parameters",
            "  FilePath - String - The relative path to the .mtl file from\n               the models folder.\n",
            "Returns",
            "  Boolean - True if successful\n",
            "Example",
            "  ModObject.AddMaterialsToCache(\"CombinedMats\") // .mtl is\n    appended in code.\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModObject.AddMaterialsToCache"
    },
    "ModObject.AddObjectToColonistHouse": {
        "body": [
            "ModObject.AddObjectToColonistHouse(",
            "\t${1:*HousingUID}, --int",
            "\t${2:*ObjectUID},  --int",
            ")${0}"
        ],
        "description": [
            "Add an item to the colonist housing (Food, Education etc.)\n",
            "Version",
            "  137.16\n",
            "Parameters",
            "  HousingUID - Number (integer) - the unique ID of the HOUSING\n                 object - Required",
            "  ObjectUID  - Number (integer) - the unique ID of the OBJECT\n                 to add - Required\n",
            "Returns",
            "  Boolean - True if successful\n",
            "Example",
            "  ModObject.AddObjectToColonistHouse(HouseId, ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.AddObjectToColonistHouse"
    },
    "ModObject.AddObjectToResearchStation": {
        "body": [
            "ModObject.AddObjectToResearchStation(",
            "\t${1:*StationUID}, --int",
            "\t${2:*ObjectUID},  --int",
            ")${0}"
        ],
        "description": [
            "Add an item a research station\n",
            "Version",
            "  ??????\n",
            "Parameters",
            "  StationUID - Number (integer) - the unique ID of the\n                 RESEARCHSTATION object - Required",
            "  ObjectUID  - Number (integer) - the unique ID of the OBJECT\n                 to add - Required\n",
            "Returns",
            "  Boolean - True if successful\n",
            "Example",
            "  ModObject.AddObjectToResearchStation(StationId, ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), OnUpdate()\n"
        ],
        "prefix": "ModObject.AddObjectToResearchStation"
    },
    "ModObject.AddObjectToStoneHead": {
        "body": [
            "ModObject.AddObjectToStoneHead(",
            "\t${1:*StoneHeadUID}, --int",
            "\t${2:*ObjectUID},    --int",
            ")${0}"
        ],
        "description": [
            "Add an item into a Stone Head\n",
            "Version",
            "  ??????\n",
            "Parameters",
            "  StoneHeadUID - Number (integer) - the unique ID of the\n                   StoneHeadUID object - Required",
            "  ObjectUID    - Number (integer) - the unique ID of the\n                   OBJECT to add - Required\n",
            "Returns",
            "  Boolean - True if successful\n",
            "Example",
            "  ModObject.AddObjectToStoneHead(StoneHeadUID, ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), OnUpdate()\n"
        ],
        "prefix": "ModObject.AddObjectToStoneHead"
    },
    "ModObject.DestroyObject": {
        "body": [
            "ModObject.DestroyObject(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Destroy an Object by UID - this is dangerous! Make sure the\n  object is free from all use (not being held etc.)\n",
            "Version",
            "  135.18\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Boolean - True if deleted\n",
            "Example",
            "  ModObject.DestroyObject(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.DestroyObject"
    },
    "ModObject.GetClothingTypesWorn": {
        "body": [
            "ModObject.GetClothingTypesWorn(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the Type of clothing object (e.g. Farmer or Bot) is\n  wearing\n",
            "Version",
            "  135.18\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Table (Strings) - All the types of clothing worn by object\n",
            "Example",
            "  Types = ModObject.GetClothingTypesWorn(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetClothingTypesWorn"
    },
    "ModObject.GetClothingUIDOnObject": {
        "body": [
            "ModObject.GetClothingUIDOnObject(",
            "\t${1:*UID},          --int",
            "\t${2:*ClothingType}, --string",
            ")${0}"
        ],
        "description": [
            "Get the UID of clothing that object (e.g. Farmer or Bot) is\n  wearing (Specifying an exact type)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID          - Number (integer) - the unique ID of the\n                   object - Required",
            "  ClothingType - String - the type of clothing to check for -\n                   Required [e.g. 'HatBeret']\n",
            "Returns",
            "  Number (Integer) - UID of the clothing object (-1 if failed)\n",
            "Example",
            "  ModObject.GetClothingUIDOnObject(ObjId, \"HatBeret\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetClothingUIDOnObject"
    },
    "ModObject.GetObjectCategory": {
        "body": [
            "ModObject.GetObjectCategory(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get Object Category from UID\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  String - The Object Category e.g. 'Food'\n",
            "Example",
            "  Category = ModObject.GetObjectCategory(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectCategory"
    },
    "ModObject.GetObjectDurability": {
        "body": [
            "ModObject.GetObjectDurability(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get durability/usage of a Holdable Object by UID\n",
            "Version",
            "  137.18\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Number (integer) - current durability (-1 if not found)\n",
            "Example",
            "  ModObject.GetObjectDurability(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectDurability"
    },
    "ModObject.GetObjectProperties": {
        "body": [
            "ModObject.GetObjectProperties(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the properties of a given object providing the object's\n  unique ID\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Table (Mixed) - Properties [1]=Type, [2]=TileX, [3]=TileY, [4]=Rotation, [5]=Name - Table will be empty if failed\n",
            "Example",
            "  Info = ModObject.GetObjectProperties(ObjId)",
            "  if (#Info > 0) then",
            "    -- success, do something here",
            "  end\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectProperties"
    },
    "ModObject.GetObjectSubcategory": {
        "body": [
            "ModObject.GetObjectSubcategory(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get Object Subcategory from UID\n",
            "Version",
            "  136.22\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  String - The Object Subcategory e.g. 'FoodMushroom'\n",
            "Example",
            "  Subcategory = ModObject.GetObjectSubcategory(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectSubcategory"
    },
    "ModObject.GetObjectTileCoord": {
        "body": [
            "ModObject.GetObjectTileCoord(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the Tilecoords of an Object from passed in ID\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Position - Table ([1] is X, [2] is Y) - The Tile Coordinate, (-1,-1) if coordinates not available\n",
            "Example",
            "  ModObject.GetObjectTileCoord(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectTileCoord"
    },
    "ModObject.GetObjectType": {
        "body": [
            "ModObject.GetObjectType(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get Object Type from UID\n",
            "Version",
            "  135.16\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  String - The Object Type e.g. 'ToolAxe'\n",
            "Example",
            "  Type = ModObject.GetObjectType(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.GetObjectType"
    },
    "ModObject.IsValidObjectUID": {
        "body": [
            "ModObject.IsValidObjectUID(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Is this Unique ID of object valid?\n",
            "Version",
            "  135.16\n",
            "Parameters",
            "  UID - Number (integer) - the unique ID of the object -\n          Required\n",
            "Returns",
            "  Boolean - True if valid\n",
            "Example",
            "  ModObject.IsValidObjectUID(ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.IsValidObjectUID"
    },
    "ModObject.IsWearingClothing": {
        "body": [
            "ModObject.IsWearingClothing(",
            "\t${1:*UID},          --int",
            "\t${2:*ClothingType}, --string",
            ")${0}"
        ],
        "description": [
            "Get if the object (e.g. Farmer or Bot) is wearing a piece of\n  defined clothing\n",
            "Version",
            "  135.18\n",
            "Parameters",
            "  UID          - Number (integer) - the unique ID of the\n                   object - Required",
            "  ClothingType - String - the type of clothing to check for -\n                   Required [Choose from \"Hat\" or \"Top\"]\n",
            "Returns",
            "  Boolean - True if the object is wearing that type of clothing. Returns false if item is not worn OR object not found\n",
            "Example",
            "  ModObject.IsWearingClothing(ObjId, \"Hat\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.IsWearingClothing"
    },
    "ModObject.MoveToInstantly": {
        "body": [
            "ModObject.MoveToInstantly(",
            "\t${1:*UID},  --int",
            "\t${2:*NewX}, --int",
            "\t${3:*NewY}, --int",
            ")${0}"
        ],
        "description": [
            "Move an Object to a desired location\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  UID  - Number (integer) - the unique ID of the object to\n           move - Required",
            "  NewX - Number (integer) - X Position (to move to) in tile\n           coordinates - Required",
            "  NewY - Number (integer) - Y Position (to move to) in tile\n           coordinates - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.MoveToInstantly(ObjId, 23, 56)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), Update()\n"
        ],
        "prefix": "ModObject.MoveToInstantly"
    },
    "ModObject.RepairColonistHouseWithObject": {
        "body": [
            "ModObject.RepairColonistHouseWithObject(",
            "\t${1:*HousingUID}, --int",
            "\t${2:*ObjectUID},  --int",
            ")${0}"
        ],
        "description": [
            "Repair colonist housing by providing the object\n",
            "Version",
            "  137.16\n",
            "Parameters",
            "  HousingUID - Number (integer) - the unique ID of the HOUSING\n                 object - Required",
            "  ObjectUID  - Number (integer) - the unique ID of the OBJECT\n                 to repair with - Required\n",
            "Returns",
            "  Boolean - True if successful\n",
            "Example",
            "  ModObject.RepairColonistHouseWithObject(HouseId, ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.RepairColonistHouseWithObject"
    },
    "ModObject.SetNodeMaterial": {
        "body": [
            "ModObject.SetNodeMaterial(",
            "\t${1:*UID},        --int",
            "\t${2:*NodeName},   --string",
            "\t${3:*NewMatName}, --string",
            "\t${4:OldMatName},  --string = \"\"",
            ")${0}"
        ],
        "description": [
            "Set material for a named node within a custom object\n",
            "Version",
            "  ??????\n",
            "Parameters",
            "  UID        - Number (integer) - the unique ID of the object\n                 - Required",
            "  NodeName   - String - Regex pattern - Name of node within\n                 object (in OBJ file: o _______) - Required.\n                 (https://www.regular-\n                 expressions.info/quickstart.html)",
            "  NewMatName - String - Name of new material (in MTL file:\n                 newmtl _______) - Required.",
            "  OldMatName - String - Regex pattern - Name of old material\n                 (in OBJ file: usemtl _______) - Optional.\n                 If not supplied, then new material is\n                 assigned to the first material slot.\n",
            "Returns",
            "  Bool\n",
            "Example",
            "  DidAssignMat = ModObject.SetNodeMaterial(ObjId, 'Lights.*',\n    'CombinedMats/GreenGlow' )\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.SetNodeMaterial"
    },
    "ModObject.SetObjectActive": {
        "body": [
            "ModObject.SetObjectActive(",
            "\t${1:*UID},    --int",
            "\t${2:*Active}, --bool",
            ")${0}"
        ],
        "description": [
            "Set object active by UID (Inactive means invisible and won't\n  tick/respond etc. (Disabled))\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID    - Number (integer) - the unique ID of the object -\n             Required",
            "  Active - Boolean - Active state of the item - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.SetObjectActive(ObjId, true)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.SetObjectActive"
    },
    "ModObject.SetObjectDurability": {
        "body": [
            "ModObject.SetObjectDurability(",
            "\t${1:*UID},        --int",
            "\t${2:*Durability}, --int",
            ")${0}"
        ],
        "description": [
            "Set durability/usage of a Holdable Object by UID\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  UID        - Number (integer) - the unique ID of the object\n                 - Required",
            "  Durability - Number (integer) - the durability to set for\n                 the item - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.SetObjectDurability(ObjId, 3)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.SetObjectDurability"
    },
    "ModObject.SetObjectRotation": {
        "body": [
            "ModObject.SetObjectRotation(",
            "\t${1:*UID}, --int",
            "\t${2:RotX}, --float = 0f",
            "\t${3:RotY}, --float = 0f",
            "\t${4:RotZ}, --float = 0f",
            ")${0}"
        ],
        "description": [
            "Set rotation of an Object by UID\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  UID  - Number (integer) - the unique ID of the object -\n           Required",
            "  RotX - Number (float) - Rotation (X) of the model - Defaults\n           to 0",
            "  RotY - Number (float) - Rotation (Y) of the model - Defaults\n           to 0",
            "  RotZ - Number (float) - Rotation (Z) of the model - Defaults\n           to 0\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.SetObjectRotation(ObjId, 90, 0, 0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.SetObjectRotation"
    },
    "ModObject.SetObjectVisibility": {
        "body": [
            "ModObject.SetObjectVisibility(",
            "\t${1:*UID},     --int",
            "\t${2:*Visible}, --bool",
            ")${0}"
        ],
        "description": [
            "Set object visibility by UID (Still operational, just hidden\n  if invisible)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  UID     - Number (integer) - the unique ID of the object -\n              Required",
            "  Visible - Boolean - Visibility of the item - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.SetObjectVisibility(ObjId, true)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.SetObjectVisibility"
    },
    "ModObject.StartMoveTo": {
        "body": [
            "ModObject.StartMoveTo(",
            "\t${1:*UID},   --int",
            "\t${2:*NewX},  --int",
            "\t${3:*NewY},  --int",
            "\t${4:Speed},  --float = 10f",
            "\t${5:Height}, --float = 0f",
            ")${0}"
        ],
        "description": [
            "Setup the Moving of an Object - Crude 'any object' version -\n  doesn't use pathfinding - Use with\n  ModObject.UpdateMoveTo()\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UID    - Number (integer) - the unique ID of the object to\n             move - Required",
            "  NewX   - Number (integer) - X Position (to move to) in tile\n             coordinates - Required",
            "  NewY   - Number (integer) - Y Position (to move to) in tile\n             coordinates - Required",
            "  Speed  - Number (float) - The speed object should wobble\n             along a sine wave (like the Bee) - Defaults to\n             10.f",
            "  Height - Number (float) - The max height object should reach\n             along a sine wave (like the Bee) - Defaults to\n             0.0f\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModObject.StartMoveTo(ObjId, 0, 0, 10, 0) -- Only call once\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModObject.StartMoveTo"
    },
    "ModObject.UpdateMoveTo": {
        "body": [
            "ModObject.UpdateMoveTo(",
            "\t${1:*UID},   --int",
            "\t${2:Arc},    --bool = false",
            "\t${3:Wobble}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Update the Moving Object - Use only on Update() - Must be\n  setup with ModObject.StartMoveTo()\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  UID    - Number (integer) - the unique ID of the object to\n             move - Required",
            "  Arc    - Boolean - If the object should follow an arc\n             trajectory (starts at zero, mid point is max\n             height) - Defaults to false",
            "  Wobble - Boolean - If the object should wobble along a sine\n             wave (like the Bee) - Defaults to false\n",
            "Returns",
            "  true when complete, false if still needs to be called\n",
            "Example",
            "  MoveComplete = ModObject.UpdateMoveTo(ObjId, true, true)\n",
            "Note",
            "  Can be used in functions: Update()\n"
        ],
        "prefix": "ModObject.UpdateMoveTo"
    },
    "ModPlayer.DropAllHeldObjects": {
        "body": [
            "ModPlayer.DropAllHeldObjects()"
        ],
        "description": [
            "Drop all held objects in players hands\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModPlayer.DropAllHeldObjects()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.DropAllHeldObjects"
    },
    "ModPlayer.DropAllUpgrades": {
        "body": [
            "ModPlayer.DropAllUpgrades()"
        ],
        "description": [
            "Drop all upgrades from player\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModPlayer.DropAllUpgrades()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.DropAllUpgrades"
    },
    "ModPlayer.GetHeldObjectType": {
        "body": [
            "ModPlayer.GetHeldObjectType()"
        ],
        "description": [
            "Get the held object type that the player is holding\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  String - The object type\n",
            "Example",
            "  heldType = ModPlayer.GetHeldObjectType()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.GetHeldObjectType"
    },
    "ModPlayer.GetHeldObjectUIDs": {
        "body": [
            "ModPlayer.GetHeldObjectUIDs()"
        ],
        "description": [
            "Get all the held object unique IDs that the player farmer is\n  holding\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Table (Number Array) - The unique IDs of the objects being held\n",
            "Example",
            "  ModPlayer.GetHeldObjectUIDs()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.GetHeldObjectUIDs"
    },
    "ModPlayer.GetLocation": {
        "body": [
            "ModPlayer.GetLocation()"
        ],
        "description": [
            "Get the player's position in tilecoordinates\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Table (two integers) - Table[1] is X location, Table[2] is Y location [NOTE: Returns -1,-1 if player not available]\n",
            "Example",
            "  ModPlayer.GetLocation()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.GetLocation"
    },
    "ModPlayer.GetState": {
        "body": [
            "ModPlayer.GetState()"
        ],
        "description": [
            "Get the Player's state\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  String - The player's state\n",
            "Example",
            "  State = ModPlayer.GetState()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.GetState"
    },
    "ModPlayer.GetUID": {
        "body": [
            "ModPlayer.GetUID()"
        ],
        "description": [
            "Get the Player's Unique ID\n",
            "Version",
            "  135.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number (integer) - The persistent player UID, -1 if unavailable\n",
            "Example",
            "  UID = ModPlayer.GetUID()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.GetUID"
    },
    "ModPlayer.IsBusy": {
        "body": [
            "ModPlayer.IsBusy()"
        ],
        "description": [
            "Is the player currently doing something?\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Boolean - True if player state is anything other than \"None\".\n",
            "Example",
            "  IsBusy = ModPlayer.IsBusy()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.IsBusy"
    },
    "ModPlayer.MoveTo": {
        "body": [
            "ModPlayer.MoveTo(",
            "\t${1:x}, --int",
            "\t${2:y}, --int",
            ")${0}"
        ],
        "description": [
            "Move the player to another location\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  x - Number (integer) - The location to move to in tile\n        coordinates",
            "  y - Number (integer) - The location to move to in tile\n        coordinates\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModPlayer.MoveTo(86, 21)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModPlayer.MoveTo"
    },
    "ModPlayer.SetStartLocation": {
        "body": [
            "ModPlayer.SetStartLocation(",
            "\t${1:StartX}, --int",
            "\t${2:StartY}, --int",
            ")${0}"
        ],
        "description": [
            "Set the player's position in tilecoordinates\n",
            "Version",
            "  134.30\n",
            "Parameters",
            "  StartX - Number (integer) - The start location in tile\n             coordinates",
            "  StartY - Number (integer) - The start location in tile\n             coordinates\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModPlayer.SetStartLocation(20, 20)\n",
            "Note",
            "  Can be used in functions: AfterLoad_CreatedWorld()\n",
            "Warning",
            "  The tutorial requires that X is at least two tiles from the\n    maps right edge and Y is 2 tiles from the top edge.\n"
        ],
        "prefix": "ModPlayer.SetStartLocation"
    },
    "ModQuest.IsObjectTypeUnlocked": {
        "body": [
            "ModQuest.IsObjectTypeUnlocked(",
            "\t${1:*ObjectTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Is an item unlocked by Quest/Research? Works for objects and\n  buildings.\n",
            "Version",
            "  136.27\n",
            "Parameters",
            "  ObjectTypeString - String - The Type of Object to query -\n                       Required\n",
            "Returns",
            "  Boolean - True if the object type is unlocked (By Quest)\n",
            "Example",
            "  ModQuest.IsObjectTypeUnlocked(\"MetalCog\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModQuest.IsObjectTypeUnlocked"
    },
    "ModQuest.SetAllQuestsComplete": {
        "body": [
            "ModQuest.SetAllQuestsComplete()"
        ],
        "description": [
            "Set all quests to complete\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModQuest.SetAllQuestsComplete()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModQuest.SetAllQuestsComplete"
    },
    "ModQuest.SetQuestComplete": {
        "body": [
            "ModQuest.SetQuestComplete(",
            "\t${1:*QuestID},   --string",
            "\t${2:DoCeremony}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Set a quest to complete\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  QuestID    - String - The Quest identifier as a string e.g.\n                 AcademyBaking - Required",
            "  DoCeremony - Boolean - Should the ceremony play? Defaults to\n                 false\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModQuest.SetQuestComplete(\"AcademyBaking\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModQuest.SetQuestComplete"
    },
    "ModSaveData.LoadValue": {
        "body": [
            "ModSaveData.LoadValue(",
            "\t${1:*Name},    --string",
            "\t${2:*Default}, --string",
            ")${0}"
        ],
        "description": [
            "Loads a variable for a Mod for current level\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  Name    - String - Variable lookup name - Required",
            "  Default - String - Default value if not found - Required\n",
            "Returns",
            "  String - Returns saved variable as a string (see example for type conversions)\n",
            "Example",
            "  function AfterLoad()",
            "    -- Numerical conversion",
            "    Speed = tonumber( ModSaveData.LoadValue(\"Speed\", 10) )",
            "  ",
            "    -- Boolean conversion (please note the capitalisation of\n    the return value)",
            "    BoostOn = ( ModSaveData.LoadValue(\"BoostOn\", true) ==\n    \"True\" )",
            "  end",
            "  function AfterSave()",
            "    ModSaveData.SaveValue(\"Speed\", Speed)",
            "    ModSaveData.SaveValue(\"BoostOn\", BoostOn)",
            "  end\n",
            "Note",
            "  Can be used in functions: BeforeLoad(), AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSaveData.LoadValue"
    },
    "ModSaveData.LoadValueInGroup": {
        "body": [
            "ModSaveData.LoadValueInGroup(",
            "\t${1:*Group},   --string",
            "\t${2:*Name},    --string",
            "\t${3:*Default}, --string",
            ")${0}"
        ],
        "description": [
            "Loads a variable for a Mod for current level from a group\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  Group   - String - The group to save under - Required",
            "  Name    - String - Variable lookup name - Required",
            "  Default - String - Default value if not found - Required\n",
            "Returns",
            "  String - Returns saved variable as a string (see example for type conversions)\n",
            "Example",
            "  function AfterLoad()",
            "    Car1.Name = ModSaveData.LoadValueInGroup(\"Car1\", \"Name\",\n    \"Car1\")",
            "  ",
            "    -- Boolean conversion (please note the capitalisation of\n    the return value)",
            "    Car1.IsDriving = ( ModSaveData.LoadValueInGroup(\"Car1\",\n    \"IsDriving\", false) == \"True\" )",
            "  ",
            "    -- Numerical conversion",
            "    Car1.Speed = tonumber(\n    ModSaveData.LoadValueInGroup(\"Car1\", \"Speed\", 22) )",
            "  end\n",
            "Note",
            "  Can be used in functions: BeforeLoad(), AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSaveData.LoadValueInGroup"
    },
    "ModSaveData.SaveValue": {
        "body": [
            "ModSaveData.SaveValue(",
            "\t${1:*Name},     --string",
            "\t${2:*Variable}, --string",
            ")${0}"
        ],
        "description": [
            "Saves a variable for a Mod for current level\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  Name     - String - Variable lookup name - Required",
            "  Variable - String - Variable to save - Required\n",
            "Returns",
            "  Boolean - Returns true on successful save (Note: If the user hasn't saved at least once, the mod cannot save data)\n",
            "Example",
            "  function AfterLoad()",
            "    Speed = tonumber( ModSaveData.LoadValue(\"Speed\", 10) )",
            "    BotList =\n    json.parse(ModSaveData.LoadValue(\"BotList\",\"{}\"))",
            "  end",
            "  function AfterSave()",
            "    ModSaveData.SaveValue(\"Speed\", Speed)",
            "    ModSaveData.SaveValue(\"BotList\", json.serialize(BotList))",
            "  end\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSaveData.SaveValue"
    },
    "ModSaveData.SaveValueInGroup": {
        "body": [
            "ModSaveData.SaveValueInGroup(",
            "\t${1:*Group},    --string",
            "\t${2:*Name},     --string",
            "\t${3:*Variable}, --string",
            ")${0}"
        ],
        "description": [
            "Saves a variable for a Mod for current level in a group\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  Group    - String - The group to save under - Required",
            "  Name     - String - Variable lookup name - Required",
            "  Variable - String - Variable to save - Required\n",
            "Returns",
            "  Boolean - Returns true on successful save (Note: If the user hasn't saved at least once, the mod cannot save data)\n",
            "Example",
            "  function AfterSave()",
            "    ModSaveData.SaveValueInGroup(\"Car1\", \"Name\", Car1.Name)",
            "    ModSaveData.SaveValueInGroup(\"Car1\", \"IsDriving\",\n    Car1.IsDriving)",
            "    ModSaveData.SaveValueInGroup(\"Car1\", \"Speed\", Car1.Speed)",
            "  end\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSaveData.SaveValueInGroup"
    },
    "ModSound.AllowDayNightCycleMusic": {
        "body": [
            "ModSound.AllowDayNightCycleMusic(",
            "\t${1:Allow}, --bool",
            ")${0}"
        ],
        "description": [
            "Allow the changing of the day/night cycle of music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  Allow - Boolean - Allow or disallow the cycle\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.AllowDayNightCycleMusic(true)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModSound.AllowDayNightCycleMusic"
    },
    "ModSound.ChangeAboutMusic": {
        "body": [
            "ModSound.ChangeAboutMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change the about screen music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeAboutMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeAboutMusic"
    },
    "ModSound.ChangeAllGameMusic": {
        "body": [
            "ModSound.ChangeAllGameMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change both day and night music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeAllGameMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeAllGameMusic"
    },
    "ModSound.ChangeDayGameMusic": {
        "body": [
            "ModSound.ChangeDayGameMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change the day music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeDayGameMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeDayGameMusic"
    },
    "ModSound.ChangeLoadingMusic": {
        "body": [
            "ModSound.ChangeLoadingMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change the loading music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeLoadingMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeLoadingMusic"
    },
    "ModSound.ChangeMenuMusic": {
        "body": [
            "ModSound.ChangeMenuMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change the menu screen music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeMenuMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeMenuMusic"
    },
    "ModSound.ChangeMusicVolume": {
        "body": [
            "ModSound.ChangeMusicVolume(",
            "\t${1:Volume}, --float",
            ")${0}"
        ],
        "description": [
            "Change volume of the music in game\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Volume - Number (float) - The volume setting\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeMusicVolume(0.0)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModSound.ChangeMusicVolume"
    },
    "ModSound.ChangeNightGameMusic": {
        "body": [
            "ModSound.ChangeNightGameMusic(",
            "\t${1:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change the night music\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  ReplacementSound - String - Name of the music .WAV file\n                       located in the 'Sounds' folder in\n                       your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeNightGameMusic(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.ChangeNightGameMusic"
    },
    "ModSound.ChangePitch": {
        "body": [
            "ModSound.ChangePitch(",
            "\t${1:EventName}, --string",
            "\t${2:Pitch},     --float",
            ")${0}"
        ],
        "description": [
            "Change pitch of an event sound in game\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  EventName - String - The sound event to change",
            "  Pitch     - Number (float) - The pitch setting\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangePitch(\"AnimalCowEating\", 2)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModSound.ChangePitch"
    },
    "ModSound.ChangeSound": {
        "body": [
            "ModSound.ChangeSound(",
            "\t${1:EventName},        --string",
            "\t${2:ReplacementSound}, --string",
            ")${0}"
        ],
        "description": [
            "Change an event sound in game\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  EventName        - String - The sound event to replace",
            "  ReplacementSound - String - Name of the custom sound .WAV\n                       file located in the 'Sounds' folder\n                       in your mod\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeSound(\"AnimalCowEating\", \"Monster\") -- Where\n    Monster.wav is located under 'Sounds'\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModSound.ChangeSound"
    },
    "ModSound.ChangeVolume": {
        "body": [
            "ModSound.ChangeVolume(",
            "\t${1:EventName}, --string",
            "\t${2:Volume},    --float",
            ")${0}"
        ],
        "description": [
            "Change volume of an event sound in game\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  EventName - String - The sound event to change",
            "  Volume    - Number (float) - The volume setting\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.ChangeVolume(\"AnimalCowEating\", 20)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModSound.ChangeVolume"
    },
    "ModSound.PlayCustom3DSound": {
        "body": [
            "ModSound.PlayCustom3DSound(",
            "\t${1:*AudioFile}, --string",
            "\t${2:*UID},       --int",
            "\t${3:Pitch},      --float = 1.0f",
            "\t${4:Volume},     --float = 1.0f",
            ")${0}"
        ],
        "description": [
            "Play a custom sound at location of an object (specified by\n  UID)\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  AudioFile - String - Name of the music .WAV file located in\n                the 'Sounds' folder in your mod to play -\n                Required",
            "  UID       - Number (Integer) - The UID of the object in the\n                world - Required",
            "  Pitch     - Number (float) - The pitch setting - Defaults to\n                1.0f",
            "  Volume    - Number (float) - The volume setting - Defaults\n                to 1.0f\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.PlayCustom3DSound(\"Halloween\", ObjectUID, 1, 1)\n",
            "Note",
            "  Can be used in functions: Expose(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.PlayCustom3DSound"
    },
    "ModSound.PlayCustomSound": {
        "body": [
            "ModSound.PlayCustomSound(",
            "\t${1:AudioFile}, --string",
            ")${0}"
        ],
        "description": [
            "Play a custom sound\n",
            "Version",
            "  134.32\n",
            "Parameters",
            "  AudioFile - String - Name of the music .WAV file located in\n                the 'Sounds' folder in your mod to play\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModSound.PlayCustomSound(\"Halloween\")\n",
            "Note",
            "  Can be used in functions: Expose(), AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModSound.PlayCustomSound"
    },
    "ModStorage.AddToStorage": {
        "body": [
            "ModStorage.AddToStorage(",
            "\t${1:*StorageUID}, --int",
            "\t${2:*ObjectUID},  --int",
            ")${0}"
        ],
        "description": [
            "Add an object to provided storage\n",
            "Version",
            "  137.19\n",
            "Parameters",
            "  StorageUID - Number (integer) - The unique ID of the storage\n                 object - Required",
            "  ObjectUID  - Number (integer) - The unique ID of the object\n                 to add to storage - Required\n",
            "Returns",
            "  Boolean - If successful\n",
            "Example",
            "  Success = ModStorage.AddToStorage(StorageObjId, ObjId)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.AddToStorage"
    },
    "ModStorage.AssignStorageItemType": {
        "body": [
            "ModStorage.AssignStorageItemType(",
            "\t${1:*StorageUID},    --int",
            "\t${2:*NewTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Assign the object type of provided storage\n",
            "Version",
            "  137.19\n",
            "Parameters",
            "  StorageUID    - Number (integer) - The unique ID of the\n                    storage object - Required",
            "  NewTypeString - String - The object type to assign -\n                    Required\n",
            "Returns",
            "  Boolean - If successful\n",
            "Example",
            "  Success = ModStorage.AssignStorageItemType(StorageObjId,\n    \"TreeSeed\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.AssignStorageItemType"
    },
    "ModStorage.GetStorageInfo": {
        "body": [
            "ModStorage.GetStorageInfo(",
            "\t${1:*UID}, --int",
            ")${0}"
        ],
        "description": [
            "Get the properties of a storage object providing the\n  object's unique ID\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  UID - Number (integer) - The unique ID of the object -\n          Required\n",
            "Returns",
            "  Table (Mixed) - Properties [1]=Object It Stores, [2]=Amount Stored, [3]=Capacity, [4]=Type Of Storage\n",
            "Example",
            "  Info = ModStorage.GetStorageInfo(ObjId)",
            "  if #Info > 0 then",
            "    -- do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.GetStorageInfo"
    },
    "ModStorage.GetStorageUIDsHoldingObject": {
        "body": [
            "ModStorage.GetStorageUIDsHoldingObject(",
            "\t${1:*NewTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Return all the storage UIDs that are holding object type\n  provided\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  NewTypeString - String - The object type to search for -\n                    Required\n",
            "Returns",
            "  Table (Number) - Unique IDs of all the storage holding provided object\n",
            "Example",
            "  UIDs = ModStorage.GetStorageUIDsHoldingObject(\"Berries\")",
            "  if #UIDs > 0 then",
            "      -- do something\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.GetStorageUIDsHoldingObject"
    },
    "ModStorage.GetStorageUIDsOfStorageType": {
        "body": [
            "ModStorage.GetStorageUIDsOfStorageType(",
            "\t${1:*NewTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Return all the UIDs of storage type provided\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  NewTypeString - String - The storage type to search for -\n                    Required\n",
            "Returns",
            "  Table (Number) - Unique IDs of all the storage types\n",
            "Example",
            "  UIDs =\n    ModStorage.GetStorageUIDsOfStorageType(\"StorageGeneric\")",
            "  if #UIDs > 0 then",
            "      -- do something\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.GetStorageUIDsOfStorageType"
    },
    "ModStorage.IsStorageUIDValid": {
        "body": [
            "ModStorage.IsStorageUIDValid(",
            "\t${1:UID}, --int",
            ")${0}"
        ],
        "description": [
            "Check if a UID is a storage\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  UID - Int - The UID to query\n",
            "Returns",
            "  Boolean - Returns true if it is a valid storage. \n",
            "Example",
            "  IsAValidStorage = ModStorage.IsStorageUIDValid(123456)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.IsStorageUIDValid"
    },
    "ModStorage.RegisterForStorageAddedCallback": {
        "body": [
            "ModStorage.RegisterForStorageAddedCallback(",
            "\t${1:*StorageUID}, --int",
            "\t${2:*Callback},   --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback for on Storage Added, fires callback\n  when object added to specified storage\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  StorageUID       - Number (integer) - The unique ID of the\n                       storage object - Required",
            "  CallbackFunction - Function - The function to callback to on\n                       event - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModStorage.RegisterForStorageAddedCallback(StorageID,\n    StorageAddCallbackFunction)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.RegisterForStorageAddedCallback"
    },
    "ModStorage.RegisterForStorageItemChangedCallback": {
        "body": [
            "ModStorage.RegisterForStorageItemChangedCallback(",
            "\t${1:*StorageUID}, --int",
            "\t${2:*Callback},   --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback for on Storage Item Changed, fires\n  callback when object type stored within, changes\n",
            "Version",
            "  137.14.9?\n",
            "Parameters",
            "  StorageUID       - Number (integer) - The unique ID of the\n                       storage object - Required",
            "  CallbackFunction - Function - The function to callback to on\n                       event - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModStorage.RegisterForStorageItemChangedCallback(StorageID,\n    StorageItemChangedCallbackFunction)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.RegisterForStorageItemChangedCallback"
    },
    "ModStorage.RegisterForStorageTakenCallback": {
        "body": [
            "ModStorage.RegisterForStorageTakenCallback(",
            "\t${1:*StorageUID}, --int",
            "\t${2:*Callback},   --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback for on Storage Taken, fires callback\n  when object taken from specified storage\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  StorageUID       - Number (integer) - The unique ID of the\n                       storage object - Required",
            "  CallbackFunction - Function - The function to callback to on\n                       event - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModStorage.RegisterForStorageTakenCallback(StorageID,\n    StorageTakenCallbackFunction)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.RegisterForStorageTakenCallback"
    },
    "ModStorage.RemoveFromStorage": {
        "body": [
            "ModStorage.RemoveFromStorage(",
            "\t${1:*StorageUID}, --int",
            "\t${2:*Amount},     --int",
            "\t${3:*xPos},       --int",
            "\t${4:*yPos},       --int",
            ")${0}"
        ],
        "description": [
            "Remove X amount of objects from provided storage and place\n  it in desired location\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  StorageUID - Number (integer) - The unique ID of the storage\n                 object - Required",
            "  Amount     - Number (integer) - Amount of objects to remove\n                 - Required",
            "  xPos       - Number (integer) - The location to place object\n                 (X) - Required",
            "  yPos       - Number (integer) - The location to place object\n                 (Y) - Required\n",
            "Returns",
            "  Table (Number) - Returns a list of unique IDs of all items taken from storage\n",
            "Example",
            "  ModStorage.RemoveFromStorage(StorageObjId, 2, 24,25)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.RemoveFromStorage"
    },
    "ModStorage.SetStorageMaxCapacity": {
        "body": [
            "ModStorage.SetStorageMaxCapacity(",
            "\t${1:*UID},         --int",
            "\t${2:*MaxCapacity}, --int",
            ")${0}"
        ],
        "description": [
            "Set the capacity of a storage object providing the object's\n  unique ID\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  UID         - Number (integer) - The unique ID of the object\n                  - Required",
            "  MaxCapacity - Number (integer) - amount of storage to set to\n                  - Required\n",
            "Returns",
            "  Boolean - Returns true if successfully set\n",
            "Example",
            "  Success = ModStorage.SetStorageMaxCapacity(ObjId, 300)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.SetStorageMaxCapacity"
    },
    "ModStorage.SetStorageQuantityStored": {
        "body": [
            "ModStorage.SetStorageQuantityStored(",
            "\t${1:*UID},            --int",
            "\t${2:*CurrentStorage}, --int",
            ")${0}"
        ],
        "description": [
            "Set the current quantity of items in storage object\n  providing the object's unique ID\n",
            "Version",
            "  136.23\n",
            "Parameters",
            "  UID            - Number (integer) - The unique ID of the\n                     object - Required",
            "  CurrentStorage - Number (integer) - amount of item in\n                     storage - Required\n",
            "Returns",
            "  Boolean - Returns true if successfully set\n",
            "Example",
            "  Success = ModStorage.SetStorageQuantityStored(ObjId, 23)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.SetStorageQuantityStored"
    },
    "ModStorage.SetStorageType": {
        "body": [
            "ModStorage.SetStorageType(",
            "\t${1:*NewTypeString},  --string",
            "\t${2:*MaxCapacity},    --int",
            "\t${3:*NewStorageType}, --string",
            ")${0}"
        ],
        "description": [
            "Set the type of Storage for an item (Allows either 'generic'\n  or 'palette' only)\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  NewTypeString  - String - The object type to search for -\n                     Required",
            "  MaxCapacity    - Number (integer) - amount of storage to set\n                     to - Required",
            "  NewStorageType - String - The type of storage to use -\n                     Required [Examples: StorageGeneric,\n                     StorageGenericMedium, StoragePalette,\n                     StoragePaletteMedium, StorageLiquid,\n                     StorageLiquidMedium, StorageWorker,\n                     StorageFertiliser, StorageSand,\n                     StorageSandMedium, StorageSeedlings]\n",
            "Returns",
            "  Boolean - Returns true if successfully set\n",
            "Example",
            "  Success = ModStorage.SetStorageType(\"Berries\", 200,\n    \"StorageGeneric\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.SetStorageType"
    },
    "ModStorage.TransferBetweenStorages": {
        "body": [
            "ModStorage.TransferBetweenStorages(",
            "\t${1:*SourceStorageUID},      --int",
            "\t${2:*DestinationStorageUID}, --int",
            "\t${3:Amount},                 --int",
            ")${0}"
        ],
        "description": [
            "Transfer from storage to storage\n",
            "Version",
            "  ????????\n",
            "Parameters",
            "  SourceStorageUID      - Number (integer) - The unique ID of\n                            the source storage - Required",
            "  DestinationStorageUID - Number (integer) - The unique ID of\n                            the destination storage -\n                            Required",
            "  Amount                - Number (integer) - The number of\n                            items to transfer\n",
            "Returns",
            "  TransferredAmount - Number (integer) - Amount if successful, 0 if not.\n",
            "Example",
            "  QtyMoved =\n    ModStorage.TransferBetweenStorages(SourceStorageUID,\n    DestinationStorageUID, 25)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModStorage.TransferBetweenStorages"
    },
    "ModTiles.ClearEverythingInArea": {
        "body": [
            "ModTiles.ClearEverythingInArea(",
            "\t${1:*StartX}, --int",
            "\t${2:*StartY}, --int",
            "\t${3:*EndX},   --int",
            "\t${4:*EndY},   --int",
            ")${0}"
        ],
        "description": [
            "Clear everything (all objects, excludes Bots/Player) in an\n  area\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  StartX - Number (integer) - The location to start the clear\n             from (X) - Required",
            "  StartY - Number (integer) - The location to start the clear\n             from (Y) - Required",
            "  EndX   - Number (integer) - The location to end the clear at\n             (X) - Required",
            "  EndY   - Number (integer) - The location to end the clear at\n             (Y) - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTiles.ClearEverythingInArea(0,0, ModTiles.GetTilesWide()\n    - 1, ModTiles.GetTilesHigh() - 1)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.ClearEverythingInArea"
    },
    "ModTiles.ClearEverythingOnSingleTile": {
        "body": [
            "ModTiles.ClearEverythingOnSingleTile(",
            "\t${1:*StartX}, --int",
            "\t${2:*StartY}, --int",
            ")${0}"
        ],
        "description": [
            "Clear everything (all objects, excludes Bots/Player) on a\n  single tile\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  StartX - Number (integer) - The location to clear (X) -\n             Required",
            "  StartY - Number (integer) - The location to clear (Y) -\n             Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTiles.ClearEverythingOnSingleTile(0,0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.ClearEverythingOnSingleTile"
    },
    "ModTiles.ClearSpecificsInArea": {
        "body": [
            "ModTiles.ClearSpecificsInArea(",
            "\t${1:*StartX},          --int",
            "\t${2:*StartY},          --int",
            "\t${3:*EndX},            --int",
            "\t${4:*EndY},            --int",
            "\t${5:*Buildings},       --bool",
            "\t${6:*StaticObjects},   --bool",
            "\t${7:*HoldableObjects}, --bool",
            "\t${8:*Tiles},           --bool",
            ")${0}"
        ],
        "description": [
            "Clear specific objects (excludes Bots/Player) in an area\n",
            "Version",
            "  134.23\n",
            "Parameters",
            "  StartX          - Number (integer) - The location to start\n                      the clear from (X) - Required",
            "  StartY          - Number (integer) - The location to start\n                      the clear from (Y) - Required",
            "  EndX            - Number (integer) - The location to end the\n                      clear at (X) - Required",
            "  EndY            - Number (integer) - The location to end the\n                      clear at (Y) - Required",
            "  Buildings       - Boolean - Clears all Buildings in area -\n                      Required",
            "  StaticObjects   - Boolean - Clears all Static Objects in\n                      area - Required",
            "  HoldableObjects - Boolean - Clears all Holdable in area -\n                      Required",
            "  Tiles           - Boolean - Resets all Tiles in area -\n                      Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTiles.ClearSpecificsInArea(ClearSpecificsInArea(20,20,\n    40, 40, true, true, true, true)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.ClearSpecificsInArea"
    },
    "ModTiles.GetAmountObjectsOfTypeInArea": {
        "body": [
            "ModTiles.GetAmountObjectsOfTypeInArea(",
            "\t${1:*NewTypeString}, --string",
            "\t${2:*StartX},        --int",
            "\t${3:*StartY},        --int",
            "\t${4:*EndX},          --int",
            "\t${5:*EndY},          --int",
            ")${0}"
        ],
        "description": [
            "Get the amount of objects of type in a specified area\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - The object type to search for -\n                    Required",
            "  StartX        - Number (integer) - The location to start the\n                    search from (X) - Required",
            "  StartY        - Number (integer) - The location to start the\n                    search from (Y) - Required",
            "  EndX          - Number (integer) - The location to end the\n                    search at (X) - Required",
            "  EndY          - Number (integer) - The location to end the\n                    search at (Y) - Required\n",
            "Returns",
            "  Number (integer) - Amount of objects in area\n",
            "Example",
            "  ObjectsOnTile =\n    ModTiles.GetAmountObjectsOfTypeInArea(\"BerriesJam\", 0,0,\n    ModTiles.GetTilesWide() - 1, ModTiles.GetTilesHigh() -\n    1)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetAmountObjectsOfTypeInArea"
    },
    "ModTiles.GetHoldableObjectUIDs": {
        "body": [
            "ModTiles.GetHoldableObjectUIDs(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Get all the unique IDs of the Holdable objects on a\n  specified tile\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  xPos - Number (integer) - The location to query (X) -\n           Required",
            "  yPos - Number (integer) - The location to query (Y) -\n           Required\n",
            "Returns",
            "  Table - Number array containing all object UIDs\n",
            "Example",
            "  UIDs = ModTiles.GetHoldableObjectUIDs(0,0)",
            "  if #UIDs > 0 then",
            "    -- do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetHoldableObjectUIDs"
    },
    "ModTiles.GetMapLimits": {
        "body": [
            "ModTiles.GetMapLimits()"
        ],
        "description": [
            "Get the width and height (limits) of the map\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Table (2x integer) - The width/height of map. Where [1] is width and [2] is height\n",
            "Example",
            "  Limits = ModTiles.GetMapLimits()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetMapLimits"
    },
    "ModTiles.GetObjectTypeOnTile": {
        "body": [
            "ModTiles.GetObjectTypeOnTile(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Get all the objects on a specified tile\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  xPos - Number (integer) - The location to query (X) -\n           Required",
            "  yPos - Number (integer) - The location to query (Y) -\n           Required\n",
            "Returns",
            "  Table - String array containing all object types\n",
            "Example",
            "  Objects = ModTiles.GetObjectTypeOnTile(0,0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetObjectTypeOnTile"
    },
    "ModTiles.GetObjectUIDsOnTile": {
        "body": [
            "ModTiles.GetObjectUIDsOnTile(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Get all the unique IDs of the objects on a specified tile\n",
            "Version",
            "  135.16\n",
            "Parameters",
            "  xPos - Number (integer) - The location to query (X) -\n           Required",
            "  yPos - Number (integer) - The location to query (Y) -\n           Required\n",
            "Returns",
            "  Table - Number array containing all object UIDs\n",
            "Example",
            "  UIDs = ModTiles.GetObjectUIDsOnTile(0,0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetObjectUIDsOnTile"
    },
    "ModTiles.GetRandomEmptyTileCoordinatesNear": {
        "body": [
            "ModTiles.GetRandomEmptyTileCoordinatesNear(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Get a random empty tile in the world next to a specified\n  location\n",
            "Version",
            "  137.14\n",
            "Parameters",
            "  xPos - Number (integer) - The location to start at (X) -\n           Required",
            "  yPos - Number (integer) - The location to start at (Y) -\n           Required\n",
            "Returns",
            "  Table (Number Array) - returns a table with [1]=X and [2]=Y coordinates [Returns (-1,-1) if failed]\n",
            "Example",
            "  Pos = ModTiles.GetRandomEmptyTileCoordinatesNear(20, 34)",
            "  if Pos[1] > -1 then",
            "    -- do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetRandomEmptyTileCoordinatesNear"
    },
    "ModTiles.GetSelectableObjectTypes": {
        "body": [
            "ModTiles.GetSelectableObjectTypes(",
            "\t${1:*StartX},        --int",
            "\t${2:*StartY},        --int",
            "\t${3:*EndX},          --int",
            "\t${4:*EndY},          --int",
            "\t${5:AllowBuildings}, --bool = false",
            ")${0}"
        ],
        "description": [
            "Get the Types of all the selectable items in an area\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  StartX         - Number (integer) - The start location in\n                     tile coordinates (X) - Required",
            "  StartY         - Number (integer) - The start location in\n                     tile coordinates (Y) - Required",
            "  EndX           - Number (integer) - The end location in tile\n                     coordinates (X) - Required",
            "  EndY           - Number (integer) - The end location in tile\n                     coordinates (Y) - Required",
            "  AllowBuildings - Boolean - Allow buildings in the check?\n",
            "Returns",
            "  Table (String Array) - returns a table featuring all the types of the selectable items\n",
            "Example",
            "  UIDs = ModTiles.GetSelectableObjectTypes(0,0, 30,30, false)",
            "  if #UIDs > 0 then",
            "    -- do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetSelectableObjectTypes"
    },
    "ModTiles.GetSelectableObjectUIDs": {
        "body": [
            "ModTiles.GetSelectableObjectUIDs(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Get the IDs of all the selectable items on the specified\n  Tile\n",
            "Version",
            "  137.32\n",
            "Parameters",
            "  xPos - Number (integer) - The location to query (X) -\n           Required",
            "  yPos - Number (integer) - The location to query (Y) -\n           Required\n",
            "Returns",
            "  Table (Number Array) - returns a table featuring all the unique IDs of the selectable items on the tile\n",
            "Example",
            "  UIDs = ModTiles.GetSelectableObjectUIDs(42,48)",
            "  if #UIDs > 0 then",
            "    -- do something...\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetSelectableObjectUIDs"
    },
    "ModTiles.GetTileType": {
        "body": [
            "ModTiles.GetTileType(",
            "\t${1:*x}, --int",
            "\t${2:*y}, --int",
            ")${0}"
        ],
        "description": [
            "Get a tile type at given coordinates\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  x - Number (integer) - The location to change Tile type (X)\n        - Required",
            "  y - Number (integer) - The location to change Tile type (Y)\n        - Required\n",
            "Returns",
            "  String - The type of Tile\n",
            "Example",
            "  TileType = ModTiles.GetTileType(0,0)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetTileType"
    },
    "ModTiles.GetTilesHigh": {
        "body": [
            "ModTiles.GetTilesHigh()"
        ],
        "description": [
            "Get the height (limit) of the map\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number (integer) - The height of map\n",
            "Example",
            "  Height = ModTiles.GetTilesHigh()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetTilesHigh"
    },
    "ModTiles.GetTilesWide": {
        "body": [
            "ModTiles.GetTilesWide()"
        ],
        "description": [
            "Get the width (limit) of the map\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  None\n",
            "Returns",
            "  Number (integer) - The width of map\n",
            "Example",
            "  Width = ModTiles.GetTilesWide()\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.GetTilesWide"
    },
    "ModTiles.IsBuildingOnTile": {
        "body": [
            "ModTiles.IsBuildingOnTile(",
            "\t${1:*xPos}, --int",
            "\t${2:*yPos}, --int",
            ")${0}"
        ],
        "description": [
            "Is Building specified Tile\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  xPos - Number (integer) - The location to query (X) -\n           Required",
            "  yPos - Number (integer) - The location to query (Y) -\n           Required\n",
            "Returns",
            "  Boolean - returns true/false based on the tile containing any sort of building.\n",
            "Example",
            "  BuiltOn = ModTiles.IsBuildingOnTile(42,48)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.IsBuildingOnTile"
    },
    "ModTiles.IsSubcategoryOnTile": {
        "body": [
            "ModTiles.IsSubcategoryOnTile(",
            "\t${1:*xPos},       --int",
            "\t${2:*yPos},       --int",
            "\t${3:Subcategory}, --string",
            ")${0}"
        ],
        "description": [
            "Is specified subcategory of object on Tile\n",
            "Version",
            "  135.20\n",
            "Parameters",
            "  xPos        - Number (integer) - The location to query (X) -\n                  Required",
            "  yPos        - Number (integer) - The location to query (Y) -\n                  Required",
            "  Subcategory - String - The Subcategory type to check for\n",
            "Returns",
            "  Boolean - returns true/false based on the tile containing type of the subcategory.\n",
            "Example",
            "  ModTiles.IsSubcategoryOnTile(42,48,\"Vehicles\")\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.IsSubcategoryOnTile"
    },
    "ModTiles.RegisterForPlayerOrBotEnterOrExitTile": {
        "body": [
            "ModTiles.RegisterForPlayerOrBotEnterOrExitTile(",
            "\t${1:TileX},     --int",
            "\t${2:TileY},     --int",
            "\t${3:*Callback}, --DynValue",
            ")${0}"
        ],
        "description": [
            "Register a callback for when the player or bot enters or\n  exits a designated area\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  TileX    - Number (integer)",
            "  TileY    - Number (integer)",
            "  Callback - Function - The function to callback to on event -\n               Required\n",
            "Returns",
            "  TRUE unless failed due to out of bounds or other errors\n",
            "Example",
            "  ModTile.RegisterForPlayerOrBotEnterOrExitTile(UniqueID,\n    TileX, TileY, CallbackFunction)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.RegisterForPlayerOrBotEnterOrExitTile"
    },
    "ModTiles.SetTile": {
        "body": [
            "ModTiles.SetTile(",
            "\t${1:*x},              --int",
            "\t${2:*y},              --int",
            "\t${3:*TileTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Set a tile type at given coordinates\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  x              - Number (integer) - The location to change\n                     Tile type (X) - Required",
            "  y              - Number (integer) - The location to change\n                     Tile type (Y) - Required",
            "  TileTypeString - String - The type of Tile to change it to -\n                     Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTiles.SetTile(0,0, \"Soil\")\n",
            "Note",
            "  To create a map by setting tiles - use the AfterLoad_CreatedWorld() function\n"
        ],
        "prefix": "ModTiles.SetTile"
    },
    "ModTiles.UnregisterForPlayerOrBotEnterOrExitTile": {
        "body": [
            "ModTiles.UnregisterForPlayerOrBotEnterOrExitTile(",
            "\t${1:TileX}, --int",
            "\t${2:TileY}, --int",
            ")${0}"
        ],
        "description": [
            "Register a callback for when the player or bot enters or\n  exits a designated area\n",
            "Version",
            "  137.14.9\n",
            "Parameters",
            "  TileX - Number (integer)",
            "  TileY - Number (integer)\n",
            "Returns",
            "  TRUE unless failed due to out of bounds or other errors\n",
            "Example",
            "  ModTile.UnregisterForPlayerOrBotEnterOrExitTile(TileX,\n    TileY)\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_CreatedWorld(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTiles.UnregisterForPlayerOrBotEnterOrExitTile"
    },
    "ModTimer.DestroyCallback": {
        "body": [
            "ModTimer.DestroyCallback(",
            "\t${1:TimerID}, --int",
            ")${0}"
        ],
        "description": [
            "Destroy a timer callback\n",
            "Version",
            "  ?????\n",
            "Parameters",
            "  TimerID - Number - The ID of the Timer to destroy\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTimer.DestroyCallback( TID )\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTimer.DestroyCallback"
    },
    "ModTimer.IsGameTimePassing": {
        "body": [
            "ModTimer.IsGameTimePassing()"
        ],
        "description": [
            "Is the game currently running (i.e. not paused)\n",
            "Version",
            "  ?????\n",
            "Returns",
            "  Boolean - True if time is currently passing in-game\n",
            "Example",
            "  if ModTimer.IsGameTimePassing() then",
            "    BombDetonationTimer = BombDetonationTimer - Interval",
            "  end\n",
            "Note",
            "  Can be used in functions: OnUpdate()\n"
        ],
        "prefix": "ModTimer.IsGameTimePassing"
    },
    "ModTimer.SetCallback": {
        "body": [
            "ModTimer.SetCallback(",
            "\t${1:*Callback},     --DynValue",
            "\t${2:*Milliseconds}, --int",
            "\t${3:Repeat},        --bool = false",
            ")${0}"
        ],
        "description": [
            "Call a function after a certain number of milliseconds\n",
            "Version",
            "  ?????\n",
            "Parameters",
            "  Callback     - Function - The function to callback when the\n                   time reaches zero - Required",
            "  Milliseconds - Number - Value to set the timer to, minimum\n                   50ms - Required",
            "  Repeat       - Boolean - True to repeat, False to destroy\n                   the timer after the first callback -\n                   Defaults to false\n",
            "Returns",
            "  Number - Timer ID\n",
            "Example",
            "  ModTimer.SetCallback( GimmeTwoSeconds, 2000 )\n",
            "Note",
            "  Can be used in functions: AfterLoad(), AfterLoad_LoadedWorld(), AfterSave(), OnUpdate()\n"
        ],
        "prefix": "ModTimer.SetCallback"
    },
    "ModTool.CreateTool": {
        "body": [
            "ModTool.CreateTool(",
            "\t${1:*UniqueName},               --string",
            "\t${2:NewIngredientsStringArr},   --string[] = null",
            "\t${3:NewIngredientsAmountArr},   --int[] = null",
            "\t${4:ObjectsToUseOnArr},         --string[] = null",
            "\t${5:TilesToUseOnArr},           --string[] = null",
            "\t${6:ObjectsToProduceArr},       --string[] = null",
            "\t${7:ObjectsToProduceAmountArr}, --int[] = null",
            "\t${8:AnimationDuration},         --float = 2.0f",
            "\t${9:ModelName},                 --string = \"\"",
            "\t${10:UsingCustomModel},          --bool = true",
            "\t${11:CallbackOnComplete},        --DynValue = null",
            "\t${12:DestroyTarget},             --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom tool item, one the player can pickup and use\n  on defined objects\n",
            "Version",
            "  135.6\n",
            "Parameters",
            "  UniqueName             - String - The unique and\n                             corresponding name of the tool\n                             - Required",
            "  Ingredients            - String array - List of ingredients\n                             required to make the tool -\n                             Defaults to none",
            "  IngredientQuantities   - Number (integer) array - The amount\n                             of each of the ingredients\n                             (Must match size of ingredients\n                             array) - Defaults to none",
            "  ObjectsToUseOn         - String array - List of objects this\n                             tool works on - Defaults to\n                             none",
            "  TilesToUseOn           - String array - List of tiles this\n                             tool works on - Defaults to\n                             none",
            "  ObjectsToProduce       - String array - List of objects to\n                             produce once tool has been used\n                             - Defaults to none",
            "  ObjectsToProduceAmount - Number (integer) array - Amount of\n                             each object to produce once\n                             tool has been used - Defaults\n                             to none",
            "  AnimationDuration      - Number (float) - How long the\n                             animation lasts - Defaults to 2\n                             seconds",
            "  ModelName              - String - The name/path of the\n                             custom model to use or\n                             name/path of the in game model\n                             to use - Defaults to in game\n                             'Axe' Model",
            "  UsingCustomModel       - Boolean - True if using a custom\n                             model, false if using in game\n                             model/default model - Defaults\n                             to true",
            "  CallbackOnComplete     - Function - The function to callback\n                             when the tool action is\n                             complete [Param 1 is the Unique\n                             ID of the Bot/Farmer/User,\n                             Param 2 is TileLocation X,\n                             Param 3 is Y] - Defaults to\n                             none",
            "  DestroyTarget          - Boolean - Destroy the target object\n                             once completed - Defaults to\n                             true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTool.CreateTool(\"MagicCowWand\", {\"Stick\"}, {1},\n    {\"AnimalCow\"}, {}, {\"AnimalSheep\", \"AnimalChicken\"}, {3,\n    1}, 2.0, \"Models/Tools/ToolChiselCrude\", false,\n    WandCallback) -- Use on Cow, In Game Model",
            "  ModTool.CreateTool(\"MagicCowWand\", {\"Stick\"}, {1},\n    {\"AnimalCow\"}, {}, {\"AnimalSheep\", \"AnimalChicken\"}, {3,\n    1}, 2.0, \"hammer\", true, WandCallback) -- Use on Cow,\n    Custom Model",
            "  ModTool.CreateTool(\"GrassCow\", {\"Stick\"}, {1}, {},\n    {\"Empty\"}, {\"AnimalCow\"}, {1}, 2.0,\n    \"Models/Tools/ToolChiselCrude\", false, WandCallback) --\n    Use on Grass Tile, Produce Cow, In Game Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModTool.CreateTool"
    },
    "ModTop.CreateTop": {
        "body": [
            "ModTop.CreateTop(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom top clothing item, one the player can wear\n",
            "Version",
            "  135.8\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the top\n                              - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the top -\n                              Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Lumberjack' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModTop.CreateTop(\"Top1\") -- Default Model",
            "  ModTop.CreateTop(\"Top2\", {\"Wool\"}, {1})-- Default Model",
            "  ModTop.CreateTop(\"Top3\", {\"Wool\"}, {1},\n    \"Models/Clothes/Tops/TopAdventurer\", false) -- In Game\n    Model",
            "  ModTop.CreateTop(\"Top4\", {\"Wool\"}, {1}, \"BigTopHat\", true)\n    -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModTop.CreateTop"
    },
    "ModToy.CreateToy": {
        "body": [
            "ModToy.CreateToy(",
            "\t${1:*UniqueName},             --string",
            "\t${2:NewIngredientsStringArr}, --string[] = null",
            "\t${3:NewIngredientsAmountArr}, --int[] = null",
            "\t${4:ModelName},               --string = \"\"",
            "\t${5:UsingCustomModel},        --bool = true",
            ")${0}"
        ],
        "description": [
            "Create a custom Toy item, one the player can use as a Toy\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  UniqueName              - String - The unique and\n                              corresponding name of the Toy\n                              - Required",
            "  NewIngredientsStringArr - String array - List of ingredients\n                              required to make the Toy -\n                              Defaults to none",
            "  NewIngredientsAmountArr - Number (integer) array - The\n                              amount of each of the\n                              ingredients (Must match size\n                              of ingredients array) -\n                              Defaults to none",
            "  ModelName               - String - The name/path of the\n                              custom model to use or\n                              name/path of the in game model\n                              to use - Defaults to in game\n                              'Doll' Model",
            "  UsingCustomModel        - Boolean - True if using a custom\n                              model, false if using in game\n                              model/default model - Defaults\n                              to true\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModToy.CreateToy(\"Toy1\") -- Default Model",
            "  ModToy.CreateToy(\"Toy2\", {\"Stick\"}, {1})-- Default Model",
            "  ModToy.CreateToy(\"Toy3\", {\"Stick\"}, {1}, \"Models/Toys/Doll\",\n    false) -- In Game Model",
            "  ModToy.CreateToy(\"Toy4\", {\"Stick\"}, {1},\n    \"Plastic/DollHouse\", true) -- Custom Model\n",
            "Note",
            "  Can be used in functions: Creation()\n"
        ],
        "prefix": "ModToy.CreateToy"
    },
    "ModUI.ShowPopup": {
        "body": [
            "ModUI.ShowPopup(",
            "\t${1:*Title},       --string",
            "\t${2:*Description}, --string",
            ")${0}"
        ],
        "description": [
            "Show a UI Popup with a desired title and description\n",
            "Version",
            "  135.9\n",
            "Parameters",
            "  Title       - String - Title to be displayed - Required",
            "  Description - String - Description to be displayed (Will\n                  scroll if needed) - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModUI.ShowPopup(\"Well Done!\",\"You pressed that button that I\n    knew you would!\")\n",
            "Note",
            "  Can be used in functions: Expose(), OnUpdate()\n"
        ],
        "prefix": "ModUI.ShowPopup"
    },
    "ModUI.ShowPopupConfirm": {
        "body": [
            "ModUI.ShowPopupConfirm(",
            "\t${1:*Title},          --string",
            "\t${2:*Description},    --string",
            "\t${3:*CallbackOK},     --DynValue",
            "\t${4:*CallbackCancel}, --DynValue",
            ")${0}"
        ],
        "description": [
            "Show a UI Popup with a desired title, description, OK/Cancel\n  buttons and Callbacks\n",
            "Version",
            "  135.20\n",
            "Parameters",
            "  Title          - String - Title to be displayed - Required",
            "  Description    - String - Description to be displayed (Will\n                     scroll if needed) - Required",
            "  CallbackOK     - Function - Callback function to be called\n                     when 'OK/Tick/Yes' is hit - Required",
            "  CallbackCancel - Function - Callback function to be called\n                     when 'Cancel/No' is hit - Required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModUI.ShowPopupConfirm(\"Well Done!\",\"You pressed that button\n    that I knew you would!\", CallbackYes, CallbackNo)\n",
            "Note",
            "  Can be used in functions: Expose(), OnUpdate()\n"
        ],
        "prefix": "ModUI.ShowPopupConfirm"
    },
    "ModVariable.AddRecipeToConverter": {
        "body": [
            "ModVariable.AddRecipeToConverter(",
            "\t${1:*NewConverterString},    --string",
            "\t${2:*NewObjectResultString}, --string",
            "\t${3:ResultAmount},           --int = 1",
            ")${0}"
        ],
        "description": [
            "Add an existing Recipe to a specific converter\n",
            "Version",
            "  135.10\n",
            "Parameters",
            "  NewConverterString    - String - The Converter this applies\n                            to - Required",
            "  NewObjectResultString - String - Object Type - Required",
            "  ResultAmount          - Number (integer) - Amount of object\n                            to spawn - Defaults to 1\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.AddRecipeToConverter(\"Workbench\", \"Berries\", 3)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.AddRecipeToConverter"
    },
    "ModVariable.GetVariableAsFloat": {
        "body": [
            "ModVariable.GetVariableAsFloat(",
            "\t${1:Name}, --string",
            ")${0}"
        ],
        "description": [
            "Gets a game variable as a float\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Name - String - Variable name\n",
            "Returns",
            "  Number (float) - Value\n",
            "Example",
            "  NumVal = ModVariable.GetVariableAsInt(\"TurfChance\")\n"
        ],
        "prefix": "ModVariable.GetVariableAsFloat"
    },
    "ModVariable.GetVariableAsInt": {
        "body": [
            "ModVariable.GetVariableAsInt(",
            "\t${1:Name}, --string",
            ")${0}"
        ],
        "description": [
            "Gets a game variable as an integer\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Name - String - Variable name\n",
            "Returns",
            "  Number (integer) - Value\n",
            "Example",
            "  NumVal = ModVariable.GetVariableAsInt(\"TurfChance\")\n"
        ],
        "prefix": "ModVariable.GetVariableAsInt"
    },
    "ModVariable.GetVariableAsString": {
        "body": [
            "ModVariable.GetVariableAsString(",
            "\t${1:Name}, --string",
            ")${0}"
        ],
        "description": [
            "Gets a game variable as a string\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Name - String - Variable name\n",
            "Returns",
            "  String - Value\n",
            "Example",
            "  Value = ModVariable.GetVariableAsInt(\"TurfChance\")\n"
        ],
        "prefix": "ModVariable.GetVariableAsString"
    },
    "ModVariable.GetVariableFarmerActionAsInt": {
        "body": [
            "ModVariable.GetVariableFarmerActionAsInt(",
            "\t${1:ActionString},     --string",
            "\t${2:TargetTypeString}, --string",
            "\t${3:ToolTypeString},   --string",
            ")${0}"
        ],
        "description": [
            "Get Variable (Action 'to' TargetType 'using' ToolType -\n  returns Int)(FARMER BASED ON OBJECTS)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  ActionString     - String - Farmer State Action",
            "  TargetTypeString - String - Object Type (Target)",
            "  ToolTypeString   - String - Tool Type\n",
            "Returns",
            "  Number (integer) - Amount of actions required - Defaults to 0\n",
            "Example",
            "  ActionsRequired =\n    ModVariable.GetVariableFarmerActionAsInt(\"Chopping\",\n    \"TreeCoconut\", \"Rock\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableFarmerActionAsInt"
    },
    "ModVariable.GetVariableFarmerActionOnTilesAsInt": {
        "body": [
            "ModVariable.GetVariableFarmerActionOnTilesAsInt(",
            "\t${1:ActionString},   --string",
            "\t${2:TileTypeString}, --string",
            "\t${3:ToolTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Get Variable (Action 'to' TargetType 'using' ToolType -\n  returns Int)(FARMER BASED ON TILES)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  ActionString   - String - Farmer State Action",
            "  TileTypeString - String - Object Type (Target)",
            "  ToolTypeString - String - Tool Type\n",
            "Returns",
            "  Number (integer) - Amount of actions required - Defaults to 0\n",
            "Example",
            "  StonePickCoalMiningActionsRequired =\n    ModVariable.GetVariableFarmerActionOnTilesAsInt(\"Mining\"\n    , \"Coal\", \"ToolPickStone\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableFarmerActionOnTilesAsInt"
    },
    "ModVariable.GetVariableFarmerActionOnTilesAsName": {
        "body": [
            "ModVariable.GetVariableFarmerActionOnTilesAsName(",
            "\t${1:ActionString},   --string",
            "\t${2:TileTypeString}, --string",
            "\t${3:ToolTypeString}, --string",
            ")${0}"
        ],
        "description": [
            "Get Variable Name (STRING)(FARMER BASED ON TILES)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  ActionString   - String - Farmer State Action",
            "  TileTypeString - String - Object Type (Target)",
            "  ToolTypeString - String - Tool Type\n",
            "Returns",
            "  String - Name of the Action\n",
            "Example",
            "  ActionName =\n    ModVariable.GetVariableFarmerActionOnTilesAsName(\"Mining\n    \", \"Coal\", \"ToolPickStone\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableFarmerActionOnTilesAsName"
    },
    "ModVariable.GetVariableForObjectAsFloat": {
        "body": [
            "ModVariable.GetVariableForObjectAsFloat(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            ")${0}"
        ],
        "description": [
            "Get Variable (float) (Object 'with' VariableName 'set to'\n  float)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable\n",
            "Returns",
            "  Number (float) - Variable amount - Defaults to 0\n",
            "Example",
            "  DriveMk1SpeedScale =\n    ModVariable.GetVariableForObjectAsFloat(\"WorkerDriveMk1\"\n    , \"SpeedScale\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableForObjectAsFloat"
    },
    "ModVariable.GetVariableForObjectAsInt": {
        "body": [
            "ModVariable.GetVariableForObjectAsInt(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            ")${0}"
        ],
        "description": [
            "Get Variable (INT) (Object 'with' VariableName 'set to' Int)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable\n",
            "Returns",
            "  Number (integer) - Variable amount - Defaults to 0\n",
            "Example",
            "  AxeMaxUsage =\n    ModVariable.GetVariableForObjectAsInt(\"ToolAxe\",\n    \"MaxUsage\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableForObjectAsInt"
    },
    "ModVariable.GetVariableForObjectAsString": {
        "body": [
            "ModVariable.GetVariableForObjectAsString(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            ")${0}"
        ],
        "description": [
            "Get Variable (STRING) (Object 'with' VariableName 'set to'\n  String)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable\n",
            "Returns",
            "  String - Variable as String\n",
            "Example",
            "  Sound =\n    ModVariable.GetVariableForObjectAsString(\"WorkingSoundNa\n    me\", \"WorkerWorkingClockwork\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.GetVariableForObjectAsString"
    },
    "ModVariable.RemoveRecipeFromConverter": {
        "body": [
            "ModVariable.RemoveRecipeFromConverter(",
            "\t${1:*NewConverterString},    --string",
            "\t${2:*NewObjectResultString}, --string",
            ")${0}"
        ],
        "description": [
            "Removes an existing Recipe from a specific converter\n",
            "Version",
            "  136.19\n",
            "Parameters",
            "  NewConverterString    - String - The Converter this applies\n                            to - Required",
            "  NewObjectResultString - String - Object Recipe Type -\n                            Required\n",
            "Returns",
            "  Boolean - True if removed recipe\n",
            "Example",
            "  ModVariable.RemoveRecipeFromConverter(\"Workbench\",\n    \"Berries\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.RemoveRecipeFromConverter"
    },
    "ModVariable.SetIngredientsForRecipe": {
        "body": [
            "ModVariable.SetIngredientsForRecipe(",
            "\t${1:NewObjectResultString},   --string",
            "\t${2:NewIngredientsStringArr}, --string[]",
            "\t${3:NewIngredientsAmountArr}, --int[]",
            "\t${4:ResultAmount},            --int",
            ")${0}"
        ],
        "description": [
            "Create a Recipe by settings ingredients\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewObjectResultString   - String - Object Type",
            "  NewIngredientsStringArr - String (Array) - Each ingredient",
            "  NewIngredientsAmountArr - Number (integer) - Each ingredient\n                              amount",
            "  ResultAmount            - Number (integer) - Amount of\n                              object to spawn\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetIngredientsForRecipe(\"Berries\", {\"Stick\"},\n    {1}, 10)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetIngredientsForRecipe"
    },
    "ModVariable.SetIngredientsForRecipeSpecific": {
        "body": [
            "ModVariable.SetIngredientsForRecipeSpecific(",
            "\t${1:*NewConverterString},      --string",
            "\t${2:*NewObjectResultString},   --string",
            "\t${3:*NewIngredientsStringArr}, --string[] = null",
            "\t${4:*NewIngredientsAmountArr}, --int[] = null",
            "\t${5:ResultAmount},             --int = 1",
            ")${0}"
        ],
        "description": [
            "Create a Recipe by settings ingredients ONLY for a specific\n  converter\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewConverterString      - String - The Converter this\n                              applies to - Required",
            "  NewObjectResultString   - String - Object Type - Required",
            "  NewIngredientsStringArr - String (Array) - Each ingredient -\n                              Required",
            "  NewIngredientsAmountArr - Number (integer) - Each ingredient\n                              amount - Required",
            "  ResultAmount            - Number (integer) - Amount of\n                              object to spawn - Defaults to\n                              1\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetIngredientsForRecipeSpecific(\"Workbench\",\n    \"BasicWorker\", {\"Berries\",\"Pole\",\"Plank\"}, {4,2,1}, 1)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetIngredientsForRecipeSpecific"
    },
    "ModVariable.SetIngredientsForRecipeSpecificDoubleResults": {
        "body": [
            "ModVariable.SetIngredientsForRecipeSpecificDoubleResults(",
            "\t${1:*NewConverterString},      --string",
            "\t${2:*NewObjectResultString1},  --string",
            "\t${3:*NewObjectResultString2},  --string",
            "\t${4:*NewIngredientsStringArr}, --string[]",
            "\t${5:*NewIngredientsAmountArr}, --int[]",
            "\t${6:ResultAmount1},            --int = 1",
            "\t${7:ResultAmount2},            --int = 1",
            ")${0}"
        ],
        "description": [
            "Create a Recipe by settings ingredients with a double result\n  for a specific converter\n",
            "Version",
            "  136.26\n",
            "Parameters",
            "  NewConverterString      - String - The Converter this\n                              applies to - Required",
            "  NewObjectResultString1  - String - Object Type to produce\n                              (1) - Required",
            "  NewObjectResultString2  - String - Object Type to produce\n                              (2) - Required",
            "  NewIngredientsStringArr - String (Array) - Each ingredient -\n                              Required",
            "  NewIngredientsAmountArr - Number (integer) - Each ingredient\n                              amount - Required",
            "  ResultAmount1           - Number (integer) - Amount of\n                              object (1) to spawn - Defaults\n                              to 1",
            "  ResultAmount2           - Number (integer) - Amount of\n                              object (2) to spawn - Defaults\n                              to 1\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetIngredientsForRecipeSpecificDoubleResults(\"Wo\n    rkbench\", \"AnimalCow\", \"AnimalSheep\",\n    {\"Berries\",\"Pole\",\"Plank\"}, {4,2,1}, 2, 3)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetIngredientsForRecipeSpecificDoubleResults"
    },
    "ModVariable.SetVariable": {
        "body": [
            "ModVariable.SetVariable(",
            "\t${1:Name},   --string",
            "\t${2:String}, --string",
            ")${0}"
        ],
        "description": [
            "Sets a game variable\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  Name  - String - Variable name",
            "  Value - String/Int/Float - Value\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariable(\"SunRiseDelay\", 3)\n"
        ],
        "prefix": "ModVariable.SetVariable"
    },
    "ModVariable.SetVariableFarmerAction": {
        "body": [
            "ModVariable.SetVariableFarmerAction(",
            "\t${1:ActionString},     --string",
            "\t${2:TargetTypeString}, --string",
            "\t${3:ToolTypeString},   --string",
            "\t${4:Int},              --int",
            ")${0}"
        ],
        "description": [
            "Set Variable (Action 'to' TargetType 'using' ToolType\n  'takes' Int)(FARMER BASED ON OBJECTS)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  ActionString     - String - Farmer State Action",
            "  TargetTypeString - String - Object Type (Target)",
            "  ToolTypeString   - String - Tool Type",
            "  Int              - Number (integer) - Amount of actions\n                       required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableFarmerAction(\"Chopping\",\n    \"TreeCoconut\", \"Rock\", 32)\n"
        ],
        "prefix": "ModVariable.SetVariableFarmerAction"
    },
    "ModVariable.SetVariableFarmerActionOnTiles": {
        "body": [
            "ModVariable.SetVariableFarmerActionOnTiles(",
            "\t${1:ActionString},   --string",
            "\t${2:TileTypeString}, --string",
            "\t${3:ToolTypeString}, --string",
            "\t${4:Int},            --int",
            ")${0}"
        ],
        "description": [
            "Set Variable (Action 'on' NewType 'using' ToolType 'takes'\n  Int)(FARMER BASED ON TILES)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  ActionString   - String - Farmer State Action",
            "  TileTypeString - String - Object Type (Target)",
            "  ToolTypeString - String - Tool Type",
            "  Int            - Number (integer) - Amount of actions\n                     required\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableFarmerActionOnTiles(\"Mining\", \"Coal\",\n    \"ToolPickStone\", 20)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableFarmerActionOnTiles"
    },
    "ModVariable.SetVariableForBuildingUpgrade": {
        "body": [
            "ModVariable.SetVariableForBuildingUpgrade(",
            "\t${1:ObjectTypeFromString}, --string",
            "\t${2:ObjectTypeToString},   --string",
            ")${0}"
        ],
        "description": [
            "Sets the \"UpgradeTo\" and \"UpgradeFrom\" as one simple setter\n",
            "Version",
            "  135.15\n",
            "Parameters",
            "  ObjectTypeFromString - String - Object Type of Building to\n                           upgrade 'from'",
            "  ObjectTypeToString   - String - Object Type of Building to\n                           upgrade 'to'\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForBuildingUpgrade(\"StorageGeneric\",\n    \"StorageGenericMedium\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForBuildingUpgrade"
    },
    "ModVariable.SetVariableForObjectAsFloat": {
        "body": [
            "ModVariable.SetVariableForObjectAsFloat(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            "\t${3:Float},         --float",
            ")${0}"
        ],
        "description": [
            "Set Variable (float) (Object 'with' VariableName 'set to'\n  float)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable",
            "  Float         - Number (float) - Value to set\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForObjectAsFloat(\"WorkerDriveMk1\",\n    \"SpeedScale\", 0.5f)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForObjectAsFloat"
    },
    "ModVariable.SetVariableForObjectAsInt": {
        "body": [
            "ModVariable.SetVariableForObjectAsInt(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            "\t${3:Int},           --int",
            ")${0}"
        ],
        "description": [
            "Set Variable (INT) (Object 'with' VariableName 'set to' Int)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable",
            "  Int           - Number (integer) - Value to set\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForObjectAsInt(\"ToolAxe\", \"MaxUsage\",\n    50)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForObjectAsInt"
    },
    "ModVariable.SetVariableForObjectAsIntFromString": {
        "body": [
            "ModVariable.SetVariableForObjectAsIntFromString(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            "\t${3:StringInt},     --string",
            ")${0}"
        ],
        "description": [
            "Set Variable (INT) From String (Object 'with' VariableName\n  'set to' Int)\n",
            "Version",
            "  137.17\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable",
            "  StringInt     - Number (integer) - Value to set\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForObjectAsIntFromString(\"Hut\",\n    \"RepairObject\", \"Plank\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForObjectAsIntFromString"
    },
    "ModVariable.SetVariableForObjectAsString": {
        "body": [
            "ModVariable.SetVariableForObjectAsString(",
            "\t${1:NewTypeString}, --string",
            "\t${2:VariableName},  --string",
            "\t${3:String},        --string",
            ")${0}"
        ],
        "description": [
            "Set Variable (STRING) (Object 'with' VariableName 'set to'\n  String)\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  VariableName  - String - Variable",
            "  String        - String - Value to set\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForObjectAsString(\"WorkerDriveMk0\",\n    \"MoveSoundName\", \"WorkerCrudeMove\")\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForObjectAsString"
    },
    "ModVariable.SetVariableForStorageAmount": {
        "body": [
            "ModVariable.SetVariableForStorageAmount(",
            "\t${1:NewTypeString}, --string",
            "\t${2:Int},           --int",
            ")${0}"
        ],
        "description": [
            "Set Storage Amount for type\n",
            "Version",
            "  134.19\n",
            "Parameters",
            "  NewTypeString - String - Object Type",
            "  Int           - Number (integer) - Value of each storage\n",
            "Returns",
            "  None\n",
            "Example",
            "  ModVariable.SetVariableForStorageAmount(\"Plank\", 200)\n",
            "Note",
            "  Can be used in functions: BeforeLoad()\n"
        ],
        "prefix": "ModVariable.SetVariableForStorageAmount"
    }
}